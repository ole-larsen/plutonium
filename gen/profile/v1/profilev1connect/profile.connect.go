// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: profile/v1/profile.proto

package profilev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ole-larsen/plutonium/gen/profile/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProfileServiceName is the fully-qualified name of the ProfileService service.
	ProfileServiceName = "profile.v1.ProfileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProfileServicePatchUserProcedure is the fully-qualified name of the ProfileService's PatchUser
	// RPC.
	ProfileServicePatchUserProcedure = "/profile.v1.ProfileService/PatchUser"
)

// ProfileServiceClient is a client for the profile.v1.ProfileService service.
type ProfileServiceClient interface {
	PatchUser(context.Context, *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error)
}

// NewProfileServiceClient constructs a client for the profile.v1.ProfileService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	profileServiceMethods := v1.File_profile_v1_profile_proto.Services().ByName("ProfileService").Methods()
	return &profileServiceClient{
		patchUser: connect.NewClient[v1.PatchUserRequest, v1.PatchUserResponse](
			httpClient,
			baseURL+ProfileServicePatchUserProcedure,
			connect.WithSchema(profileServiceMethods.ByName("PatchUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// profileServiceClient implements ProfileServiceClient.
type profileServiceClient struct {
	patchUser *connect.Client[v1.PatchUserRequest, v1.PatchUserResponse]
}

// PatchUser calls profile.v1.ProfileService.PatchUser.
func (c *profileServiceClient) PatchUser(ctx context.Context, req *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error) {
	return c.patchUser.CallUnary(ctx, req)
}

// ProfileServiceHandler is an implementation of the profile.v1.ProfileService service.
type ProfileServiceHandler interface {
	PatchUser(context.Context, *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error)
}

// NewProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileServiceHandler(svc ProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	profileServiceMethods := v1.File_profile_v1_profile_proto.Services().ByName("ProfileService").Methods()
	profileServicePatchUserHandler := connect.NewUnaryHandler(
		ProfileServicePatchUserProcedure,
		svc.PatchUser,
		connect.WithSchema(profileServiceMethods.ByName("PatchUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/profile.v1.ProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProfileServicePatchUserProcedure:
			profileServicePatchUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileServiceHandler struct{}

func (UnimplementedProfileServiceHandler) PatchUser(context.Context, *connect.Request[v1.PatchUserRequest]) (*connect.Response[v1.PatchUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("profile.v1.ProfileService.PatchUser is not implemented"))
}
