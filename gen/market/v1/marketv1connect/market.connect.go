// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: market/v1/market.proto

package marketv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ole-larsen/plutonium/gen/market/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MarketServiceName is the fully-qualified name of the MarketService service.
	MarketServiceName = "market.v1.MarketService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MarketServiceContractsProcedure is the fully-qualified name of the MarketService's Contracts RPC.
	MarketServiceContractsProcedure = "/market.v1.MarketService/Contracts"
	// MarketServiceNonceProcedure is the fully-qualified name of the MarketService's Nonce RPC.
	MarketServiceNonceProcedure = "/market.v1.MarketService/Nonce"
	// MarketServiceVerifyProcedure is the fully-qualified name of the MarketService's Verify RPC.
	MarketServiceVerifyProcedure = "/market.v1.MarketService/Verify"
	// MarketServiceCategoriesProcedure is the fully-qualified name of the MarketService's Categories
	// RPC.
	MarketServiceCategoriesProcedure = "/market.v1.MarketService/Categories"
)

// MarketServiceClient is a client for the market.v1.MarketService service.
type MarketServiceClient interface {
	Contracts(context.Context, *connect.Request[v1.ContractsRequest]) (*connect.Response[v1.ContractsResponse], error)
	Nonce(context.Context, *connect.Request[v1.NonceRequest]) (*connect.Response[v1.NonceResponse], error)
	Verify(context.Context, *connect.Request[v1.VerifyRequest]) (*connect.Response[v1.VerifyResponse], error)
	Categories(context.Context, *connect.Request[v1.CategoriesRequest]) (*connect.Response[v1.CategoriesResponse], error)
}

// NewMarketServiceClient constructs a client for the market.v1.MarketService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMarketServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MarketServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	marketServiceMethods := v1.File_market_v1_market_proto.Services().ByName("MarketService").Methods()
	return &marketServiceClient{
		contracts: connect.NewClient[v1.ContractsRequest, v1.ContractsResponse](
			httpClient,
			baseURL+MarketServiceContractsProcedure,
			connect.WithSchema(marketServiceMethods.ByName("Contracts")),
			connect.WithClientOptions(opts...),
		),
		nonce: connect.NewClient[v1.NonceRequest, v1.NonceResponse](
			httpClient,
			baseURL+MarketServiceNonceProcedure,
			connect.WithSchema(marketServiceMethods.ByName("Nonce")),
			connect.WithClientOptions(opts...),
		),
		verify: connect.NewClient[v1.VerifyRequest, v1.VerifyResponse](
			httpClient,
			baseURL+MarketServiceVerifyProcedure,
			connect.WithSchema(marketServiceMethods.ByName("Verify")),
			connect.WithClientOptions(opts...),
		),
		categories: connect.NewClient[v1.CategoriesRequest, v1.CategoriesResponse](
			httpClient,
			baseURL+MarketServiceCategoriesProcedure,
			connect.WithSchema(marketServiceMethods.ByName("Categories")),
			connect.WithClientOptions(opts...),
		),
	}
}

// marketServiceClient implements MarketServiceClient.
type marketServiceClient struct {
	contracts  *connect.Client[v1.ContractsRequest, v1.ContractsResponse]
	nonce      *connect.Client[v1.NonceRequest, v1.NonceResponse]
	verify     *connect.Client[v1.VerifyRequest, v1.VerifyResponse]
	categories *connect.Client[v1.CategoriesRequest, v1.CategoriesResponse]
}

// Contracts calls market.v1.MarketService.Contracts.
func (c *marketServiceClient) Contracts(ctx context.Context, req *connect.Request[v1.ContractsRequest]) (*connect.Response[v1.ContractsResponse], error) {
	return c.contracts.CallUnary(ctx, req)
}

// Nonce calls market.v1.MarketService.Nonce.
func (c *marketServiceClient) Nonce(ctx context.Context, req *connect.Request[v1.NonceRequest]) (*connect.Response[v1.NonceResponse], error) {
	return c.nonce.CallUnary(ctx, req)
}

// Verify calls market.v1.MarketService.Verify.
func (c *marketServiceClient) Verify(ctx context.Context, req *connect.Request[v1.VerifyRequest]) (*connect.Response[v1.VerifyResponse], error) {
	return c.verify.CallUnary(ctx, req)
}

// Categories calls market.v1.MarketService.Categories.
func (c *marketServiceClient) Categories(ctx context.Context, req *connect.Request[v1.CategoriesRequest]) (*connect.Response[v1.CategoriesResponse], error) {
	return c.categories.CallUnary(ctx, req)
}

// MarketServiceHandler is an implementation of the market.v1.MarketService service.
type MarketServiceHandler interface {
	Contracts(context.Context, *connect.Request[v1.ContractsRequest]) (*connect.Response[v1.ContractsResponse], error)
	Nonce(context.Context, *connect.Request[v1.NonceRequest]) (*connect.Response[v1.NonceResponse], error)
	Verify(context.Context, *connect.Request[v1.VerifyRequest]) (*connect.Response[v1.VerifyResponse], error)
	Categories(context.Context, *connect.Request[v1.CategoriesRequest]) (*connect.Response[v1.CategoriesResponse], error)
}

// NewMarketServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMarketServiceHandler(svc MarketServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	marketServiceMethods := v1.File_market_v1_market_proto.Services().ByName("MarketService").Methods()
	marketServiceContractsHandler := connect.NewUnaryHandler(
		MarketServiceContractsProcedure,
		svc.Contracts,
		connect.WithSchema(marketServiceMethods.ByName("Contracts")),
		connect.WithHandlerOptions(opts...),
	)
	marketServiceNonceHandler := connect.NewUnaryHandler(
		MarketServiceNonceProcedure,
		svc.Nonce,
		connect.WithSchema(marketServiceMethods.ByName("Nonce")),
		connect.WithHandlerOptions(opts...),
	)
	marketServiceVerifyHandler := connect.NewUnaryHandler(
		MarketServiceVerifyProcedure,
		svc.Verify,
		connect.WithSchema(marketServiceMethods.ByName("Verify")),
		connect.WithHandlerOptions(opts...),
	)
	marketServiceCategoriesHandler := connect.NewUnaryHandler(
		MarketServiceCategoriesProcedure,
		svc.Categories,
		connect.WithSchema(marketServiceMethods.ByName("Categories")),
		connect.WithHandlerOptions(opts...),
	)
	return "/market.v1.MarketService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MarketServiceContractsProcedure:
			marketServiceContractsHandler.ServeHTTP(w, r)
		case MarketServiceNonceProcedure:
			marketServiceNonceHandler.ServeHTTP(w, r)
		case MarketServiceVerifyProcedure:
			marketServiceVerifyHandler.ServeHTTP(w, r)
		case MarketServiceCategoriesProcedure:
			marketServiceCategoriesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMarketServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMarketServiceHandler struct{}

func (UnimplementedMarketServiceHandler) Contracts(context.Context, *connect.Request[v1.ContractsRequest]) (*connect.Response[v1.ContractsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("market.v1.MarketService.Contracts is not implemented"))
}

func (UnimplementedMarketServiceHandler) Nonce(context.Context, *connect.Request[v1.NonceRequest]) (*connect.Response[v1.NonceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("market.v1.MarketService.Nonce is not implemented"))
}

func (UnimplementedMarketServiceHandler) Verify(context.Context, *connect.Request[v1.VerifyRequest]) (*connect.Response[v1.VerifyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("market.v1.MarketService.Verify is not implemented"))
}

func (UnimplementedMarketServiceHandler) Categories(context.Context, *connect.Request[v1.CategoriesRequest]) (*connect.Response[v1.CategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("market.v1.MarketService.Categories is not implemented"))
}
