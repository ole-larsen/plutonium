// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: frontend/v1/frontend.proto

package frontendv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ole-larsen/plutonium/gen/frontend/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "frontend.v1.FrontendService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FrontendServiceMenuProcedure is the fully-qualified name of the FrontendService's Menu RPC.
	FrontendServiceMenuProcedure = "/frontend.v1.FrontendService/Menu"
	// FrontendServicePageProcedure is the fully-qualified name of the FrontendService's Page RPC.
	FrontendServicePageProcedure = "/frontend.v1.FrontendService/Page"
	// FrontendServiceContactProcedure is the fully-qualified name of the FrontendService's Contact RPC.
	FrontendServiceContactProcedure = "/frontend.v1.FrontendService/Contact"
	// FrontendServiceFaqProcedure is the fully-qualified name of the FrontendService's Faq RPC.
	FrontendServiceFaqProcedure = "/frontend.v1.FrontendService/Faq"
	// FrontendServiceHelpCenterProcedure is the fully-qualified name of the FrontendService's
	// HelpCenter RPC.
	FrontendServiceHelpCenterProcedure = "/frontend.v1.FrontendService/HelpCenter"
	// FrontendServiceSliderProcedure is the fully-qualified name of the FrontendService's Slider RPC.
	FrontendServiceSliderProcedure = "/frontend.v1.FrontendService/Slider"
	// FrontendServicePostSubscribeProcedure is the fully-qualified name of the FrontendService's
	// PostSubscribe RPC.
	FrontendServicePostSubscribeProcedure = "/frontend.v1.FrontendService/PostSubscribe"
	// FrontendServicePostContactProcedure is the fully-qualified name of the FrontendService's
	// PostContact RPC.
	FrontendServicePostContactProcedure = "/frontend.v1.FrontendService/PostContact"
)

// FrontendServiceClient is a client for the frontend.v1.FrontendService service.
type FrontendServiceClient interface {
	Menu(context.Context, *connect.Request[v1.MenuRequest]) (*connect.Response[v1.MenuResponse], error)
	Page(context.Context, *connect.Request[v1.PageRequest]) (*connect.Response[v1.PageResponse], error)
	Contact(context.Context, *connect.Request[v1.ContactRequest]) (*connect.Response[v1.ContactResponse], error)
	Faq(context.Context, *connect.Request[v1.FaqRequest]) (*connect.Response[v1.FaqResponse], error)
	HelpCenter(context.Context, *connect.Request[v1.HelpCenterRequest]) (*connect.Response[v1.HelpCenterResponse], error)
	Slider(context.Context, *connect.Request[v1.SliderRequest]) (*connect.Response[v1.SliderResponse], error)
	PostSubscribe(context.Context, *connect.Request[v1.PostSubscribeRequest]) (*connect.Response[v1.PostSubscribeResponse], error)
	PostContact(context.Context, *connect.Request[v1.PostContactRequest]) (*connect.Response[v1.PostContactResponse], error)
}

// NewFrontendServiceClient constructs a client for the frontend.v1.FrontendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	frontendServiceMethods := v1.File_frontend_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	return &frontendServiceClient{
		menu: connect.NewClient[v1.MenuRequest, v1.MenuResponse](
			httpClient,
			baseURL+FrontendServiceMenuProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Menu")),
			connect.WithClientOptions(opts...),
		),
		page: connect.NewClient[v1.PageRequest, v1.PageResponse](
			httpClient,
			baseURL+FrontendServicePageProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Page")),
			connect.WithClientOptions(opts...),
		),
		contact: connect.NewClient[v1.ContactRequest, v1.ContactResponse](
			httpClient,
			baseURL+FrontendServiceContactProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Contact")),
			connect.WithClientOptions(opts...),
		),
		faq: connect.NewClient[v1.FaqRequest, v1.FaqResponse](
			httpClient,
			baseURL+FrontendServiceFaqProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Faq")),
			connect.WithClientOptions(opts...),
		),
		helpCenter: connect.NewClient[v1.HelpCenterRequest, v1.HelpCenterResponse](
			httpClient,
			baseURL+FrontendServiceHelpCenterProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("HelpCenter")),
			connect.WithClientOptions(opts...),
		),
		slider: connect.NewClient[v1.SliderRequest, v1.SliderResponse](
			httpClient,
			baseURL+FrontendServiceSliderProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("Slider")),
			connect.WithClientOptions(opts...),
		),
		postSubscribe: connect.NewClient[v1.PostSubscribeRequest, v1.PostSubscribeResponse](
			httpClient,
			baseURL+FrontendServicePostSubscribeProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("PostSubscribe")),
			connect.WithClientOptions(opts...),
		),
		postContact: connect.NewClient[v1.PostContactRequest, v1.PostContactResponse](
			httpClient,
			baseURL+FrontendServicePostContactProcedure,
			connect.WithSchema(frontendServiceMethods.ByName("PostContact")),
			connect.WithClientOptions(opts...),
		),
	}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
	menu          *connect.Client[v1.MenuRequest, v1.MenuResponse]
	page          *connect.Client[v1.PageRequest, v1.PageResponse]
	contact       *connect.Client[v1.ContactRequest, v1.ContactResponse]
	faq           *connect.Client[v1.FaqRequest, v1.FaqResponse]
	helpCenter    *connect.Client[v1.HelpCenterRequest, v1.HelpCenterResponse]
	slider        *connect.Client[v1.SliderRequest, v1.SliderResponse]
	postSubscribe *connect.Client[v1.PostSubscribeRequest, v1.PostSubscribeResponse]
	postContact   *connect.Client[v1.PostContactRequest, v1.PostContactResponse]
}

// Menu calls frontend.v1.FrontendService.Menu.
func (c *frontendServiceClient) Menu(ctx context.Context, req *connect.Request[v1.MenuRequest]) (*connect.Response[v1.MenuResponse], error) {
	return c.menu.CallUnary(ctx, req)
}

// Page calls frontend.v1.FrontendService.Page.
func (c *frontendServiceClient) Page(ctx context.Context, req *connect.Request[v1.PageRequest]) (*connect.Response[v1.PageResponse], error) {
	return c.page.CallUnary(ctx, req)
}

// Contact calls frontend.v1.FrontendService.Contact.
func (c *frontendServiceClient) Contact(ctx context.Context, req *connect.Request[v1.ContactRequest]) (*connect.Response[v1.ContactResponse], error) {
	return c.contact.CallUnary(ctx, req)
}

// Faq calls frontend.v1.FrontendService.Faq.
func (c *frontendServiceClient) Faq(ctx context.Context, req *connect.Request[v1.FaqRequest]) (*connect.Response[v1.FaqResponse], error) {
	return c.faq.CallUnary(ctx, req)
}

// HelpCenter calls frontend.v1.FrontendService.HelpCenter.
func (c *frontendServiceClient) HelpCenter(ctx context.Context, req *connect.Request[v1.HelpCenterRequest]) (*connect.Response[v1.HelpCenterResponse], error) {
	return c.helpCenter.CallUnary(ctx, req)
}

// Slider calls frontend.v1.FrontendService.Slider.
func (c *frontendServiceClient) Slider(ctx context.Context, req *connect.Request[v1.SliderRequest]) (*connect.Response[v1.SliderResponse], error) {
	return c.slider.CallUnary(ctx, req)
}

// PostSubscribe calls frontend.v1.FrontendService.PostSubscribe.
func (c *frontendServiceClient) PostSubscribe(ctx context.Context, req *connect.Request[v1.PostSubscribeRequest]) (*connect.Response[v1.PostSubscribeResponse], error) {
	return c.postSubscribe.CallUnary(ctx, req)
}

// PostContact calls frontend.v1.FrontendService.PostContact.
func (c *frontendServiceClient) PostContact(ctx context.Context, req *connect.Request[v1.PostContactRequest]) (*connect.Response[v1.PostContactResponse], error) {
	return c.postContact.CallUnary(ctx, req)
}

// FrontendServiceHandler is an implementation of the frontend.v1.FrontendService service.
type FrontendServiceHandler interface {
	Menu(context.Context, *connect.Request[v1.MenuRequest]) (*connect.Response[v1.MenuResponse], error)
	Page(context.Context, *connect.Request[v1.PageRequest]) (*connect.Response[v1.PageResponse], error)
	Contact(context.Context, *connect.Request[v1.ContactRequest]) (*connect.Response[v1.ContactResponse], error)
	Faq(context.Context, *connect.Request[v1.FaqRequest]) (*connect.Response[v1.FaqResponse], error)
	HelpCenter(context.Context, *connect.Request[v1.HelpCenterRequest]) (*connect.Response[v1.HelpCenterResponse], error)
	Slider(context.Context, *connect.Request[v1.SliderRequest]) (*connect.Response[v1.SliderResponse], error)
	PostSubscribe(context.Context, *connect.Request[v1.PostSubscribeRequest]) (*connect.Response[v1.PostSubscribeResponse], error)
	PostContact(context.Context, *connect.Request[v1.PostContactRequest]) (*connect.Response[v1.PostContactResponse], error)
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	frontendServiceMethods := v1.File_frontend_v1_frontend_proto.Services().ByName("FrontendService").Methods()
	frontendServiceMenuHandler := connect.NewUnaryHandler(
		FrontendServiceMenuProcedure,
		svc.Menu,
		connect.WithSchema(frontendServiceMethods.ByName("Menu")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServicePageHandler := connect.NewUnaryHandler(
		FrontendServicePageProcedure,
		svc.Page,
		connect.WithSchema(frontendServiceMethods.ByName("Page")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceContactHandler := connect.NewUnaryHandler(
		FrontendServiceContactProcedure,
		svc.Contact,
		connect.WithSchema(frontendServiceMethods.ByName("Contact")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceFaqHandler := connect.NewUnaryHandler(
		FrontendServiceFaqProcedure,
		svc.Faq,
		connect.WithSchema(frontendServiceMethods.ByName("Faq")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceHelpCenterHandler := connect.NewUnaryHandler(
		FrontendServiceHelpCenterProcedure,
		svc.HelpCenter,
		connect.WithSchema(frontendServiceMethods.ByName("HelpCenter")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServiceSliderHandler := connect.NewUnaryHandler(
		FrontendServiceSliderProcedure,
		svc.Slider,
		connect.WithSchema(frontendServiceMethods.ByName("Slider")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServicePostSubscribeHandler := connect.NewUnaryHandler(
		FrontendServicePostSubscribeProcedure,
		svc.PostSubscribe,
		connect.WithSchema(frontendServiceMethods.ByName("PostSubscribe")),
		connect.WithHandlerOptions(opts...),
	)
	frontendServicePostContactHandler := connect.NewUnaryHandler(
		FrontendServicePostContactProcedure,
		svc.PostContact,
		connect.WithSchema(frontendServiceMethods.ByName("PostContact")),
		connect.WithHandlerOptions(opts...),
	)
	return "/frontend.v1.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FrontendServiceMenuProcedure:
			frontendServiceMenuHandler.ServeHTTP(w, r)
		case FrontendServicePageProcedure:
			frontendServicePageHandler.ServeHTTP(w, r)
		case FrontendServiceContactProcedure:
			frontendServiceContactHandler.ServeHTTP(w, r)
		case FrontendServiceFaqProcedure:
			frontendServiceFaqHandler.ServeHTTP(w, r)
		case FrontendServiceHelpCenterProcedure:
			frontendServiceHelpCenterHandler.ServeHTTP(w, r)
		case FrontendServiceSliderProcedure:
			frontendServiceSliderHandler.ServeHTTP(w, r)
		case FrontendServicePostSubscribeProcedure:
			frontendServicePostSubscribeHandler.ServeHTTP(w, r)
		case FrontendServicePostContactProcedure:
			frontendServicePostContactHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}

func (UnimplementedFrontendServiceHandler) Menu(context.Context, *connect.Request[v1.MenuRequest]) (*connect.Response[v1.MenuResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.Menu is not implemented"))
}

func (UnimplementedFrontendServiceHandler) Page(context.Context, *connect.Request[v1.PageRequest]) (*connect.Response[v1.PageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.Page is not implemented"))
}

func (UnimplementedFrontendServiceHandler) Contact(context.Context, *connect.Request[v1.ContactRequest]) (*connect.Response[v1.ContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.Contact is not implemented"))
}

func (UnimplementedFrontendServiceHandler) Faq(context.Context, *connect.Request[v1.FaqRequest]) (*connect.Response[v1.FaqResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.Faq is not implemented"))
}

func (UnimplementedFrontendServiceHandler) HelpCenter(context.Context, *connect.Request[v1.HelpCenterRequest]) (*connect.Response[v1.HelpCenterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.HelpCenter is not implemented"))
}

func (UnimplementedFrontendServiceHandler) Slider(context.Context, *connect.Request[v1.SliderRequest]) (*connect.Response[v1.SliderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.Slider is not implemented"))
}

func (UnimplementedFrontendServiceHandler) PostSubscribe(context.Context, *connect.Request[v1.PostSubscribeRequest]) (*connect.Response[v1.PostSubscribeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.PostSubscribe is not implemented"))
}

func (UnimplementedFrontendServiceHandler) PostContact(context.Context, *connect.Request[v1.PostContactRequest]) (*connect.Response[v1.PostContactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("frontend.v1.FrontendService.PostContact is not implemented"))
}
