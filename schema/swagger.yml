---
swagger: "2.0"
info:
  title: "Plutonium Service API"
  version: "1.0.0"
  description: |
    The Plutonium Service API provides endpoints to support the operations of the NFT Marketplace.
    This document outlines the API's structure, response formats, and capabilities for integration.
host: "plutonium"
basePath: "/api/v1"
schemes:
  - http
securityDefinitions:
  bearer:
    type: apiKey
    in: header
    name: Authorization
  x-token:
    type: apiKey
    in: header
    name: x-token
paths:
  /ping:
    get:
      tags:
        - Public
      summary: Ping endpoint for server health and latency testing.
      description: |
        The ping endpoint provides a simple "pong" response to confirm server availability.
        Use this endpoint to:
        - Verify connectivity between the client and server.
        - Measure network latency for diagnostics.
        - Perform quick and reliable health checks over HTTP.
      produces:
        - application/json
      parameters: []
      responses:
        200:
          description: "Successful response indicating server availability."
          schema:
            $ref: "#/definitions/PingResponse"
        500:
          description: |
            Internal Server Error. This typically indicates a server-side issue or
            an unexpected runtime error preventing proper functionality.
          schema:
            $ref: "#/definitions/ErrorResponse"
  /metrics:
    get:
      tags:
        - Monitoring
      summary: Retrieve Prometheus Metrics
      description: |
        This endpoint provides Prometheus-compatible metrics for monitoring the application. 
        It is typically used by Prometheus or similar monitoring tools to scrape metrics data.
      produces:
        - application/json
      responses:
        200:
          description: Metrics retrieved successfully.
          schema:
                $ref: "#/definitions/PrometheusResponse"
  # frontend API
  /frontend/menu:
    get:
      security:
        - x-token: []
      tags:
        - Frontend
      parameters:
        - name: provider
          in: query
          type: string
          description: "The provider to be used in the menu."
          required: false
      summary: "Fetches the public menu for the frontend."
      produces:
        - "application/json"
      responses:
        200:
          description: "Successfully fetched the menu."
          schema:
            $ref: '#/definitions/PublicMenu'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/slider:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      parameters:
        - type: string
          name: provider
          in: query
          description: "The provider to be used in the slider."
      summary: "slider with slides"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            $ref: '#/definitions/PublicSlider'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/contracts:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      parameters: [ ]
      summary: "get web3 market data"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            $ref: '#/definitions/PublicContracts'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/categories:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      parameters: [ ]
      summary: "get market data categories"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            $ref: '#/definitions/PublicCategories'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/users:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      parameters:
        - name: address
          in: query
          type: string
      summary: "this route fetch public users who has address"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: "#/definitions/PublicUser"
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/page/:slug:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      summary: "page"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            $ref: '#/definitions/PublicPage'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/files/:file/:
    get:
      tags:
        - Frontend
      summary: "Serve Static Images"
      produces:
        - "application/json"
      parameters:
        - type: string
          name: format
          in: query
        - type: number
          name: w
          in: query
        - type: number
          name: dpr
          in: query      
      responses:
        200:
          description: ok
          schema:
            $ref: "#/definitions/FileResponse"
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/contact:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      parameters:
        - type: string
          name: id
          in: query
      summary: "get contact form for page contact"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            $ref: '#/definitions/PublicContact'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/contact-form:
    post:
      tags:
        - Frontend
      summary: Send contact form.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/PublicContactForm"
      responses:
        200:
          description: successful create
          schema:
            $ref: "#/definitions/FormSuccess"
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/faq:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      summary: "faq"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/PublicFaqItem'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/help-center:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      summary: "help center"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/PublicHelpCenterItem'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/blog:
    get:
      security:
        - x-token: [ ]
      tags:
        - Frontend
      summary: "blog"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/PublicBlogItem'
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/blog/:slug:
    get:
      security:
        - bearer: [ ]
      tags:
        - Frontend
      summary: "Serve Blog Item"
      produces:
        - "application/json"
      responses:
        200:
          description: ok
          schema:
            $ref: "#/definitions/PublicBlogItem"
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
  /frontend/auth/wallet-connect:
    get:
      security:
        - x-token: [ ]
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          name: operation
          in: query
          description: "operation type"
        - type: string
          name: address
          in: query
          description: "public address"
      responses:
        200:
          description: "check public address in db"
          schema:
            "$ref": "#/definitions/Nonce"
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      tags:
        - auth
      summary: "This API endpoint create, store and returns credentials for new user"
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/VerifySignature"
      responses:
        200:
          description: "auth using signature verification"
          schema:
            "$ref": "#/definitions/LoginMetamaskOK"
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      tags:
        - Auth
      summary: "This API endpoint create, store and returns credentials for new user"
  /frontend/auth/callback:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - type: string
          name: code
          in: query
          description: "code"
        - type: string
          name: state
          in: query
          description: "state"
      responses:
        200:
          description: "callback from oauth"
          schema:
            "$ref": "#/definitions/Callback"
        400:
          description: "Bad request due to missing or invalid parameters."
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized. The request is missing valid authentication."
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not found. The requested resource could not be found."
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal server error."
          schema:
            $ref: "#/definitions/ErrorResponse"
      tags:
        - Auth
      summary: "oauth2 callback from provider"
definitions:
  principal:
    type: string
    description: "A unique identifier for a principal (user or entity)."
  PingResponse:
    type: object
    properties:
      message:
        type: string
        enum:
          - pong
        example: "pong"
        description: "Response message confirming successful server connectivity."
      timestamp:
        type: string
        format: date-time
        example: "2024-11-19T12:34:56Z"
        description: "The timestamp of the server response, useful for tracking latency."
  ErrorResponse:
    type: object
    properties:
      code:
        type: integer
        example: 500
        description: "HTTP status code representing the type of error encountered."
      message:
        type: string
        example: "Internal Server Error"
        description: "Brief explanation of the error encountered."
      details:
        type: string
        example: "Unexpected error while processing the request."
        description: "Additional context or information about the error, if available."
  PrometheusResponse:
    type: object
    additionalProperties:
      type: string
      format: number
  Contract:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      name:
        type: string
      address:
        type: string
      tx:
        type: string
      abi:
        type: string
  MarketplaceCollectible:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/MarketplaceCollectibleAttributes'
  MarketplaceCollectibleAttributes:
    type: object
    properties:
      itemId:
        type: integer
        format: bigInt
      tokenIds:
        type: array
        items:
          type: integer
          format: bigInt
      collectionId:
        type: integer
        format: bigInt
      uri:
        type: string
      owner:
        type: object
        $ref: "#/definitions/PublicUser"
      creator:
        type: object
        $ref: "#/definitions/PublicUser"
      metadata:
        $ref: "#/definitions/MarketplaceCollectibleMetadata"
      details:
        $ref: "#/definitions/MarketplaceCollectibleDetails"
  MarketplaceCollectibleMetadata:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      image:
        type: string
      external_url:
        type: string
      background_color:
        type: string
      animation_url:
        type: string
      youtube_url:
        type: string
      attributes:
        type: array
        items:
          $ref: "#/definitions/MetadataAttributes"
  Metadata:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      image:
        type: string
      external_url:
        type: string
      background_color:
        type: string
      animation_url:
        type: string
      youtube_url:
        type: string
      attributes:
        type: array
        items:
          $ref: "#/definitions/MetadataAttributes"
  MarketplaceCollectibleDetails:
    type: object
    properties:
      address:
        type: string
      collection:
        type: string
      tags:
        type: string
      fulfilled:
        type: boolean
      cancelled:
        type: boolean
      auction:
        type: boolean
      price:
        type: string
      price_wei:
        type: string
      fee:
        type: string
      fee_wei:
        type: string
      total:
        type: string
      total_wei:
        type: string
      start_time:
        type: integer
        format: int64
      end_time:
        type: integer
        format: int64
      start_price:
        type: string
      reserve_price:
        type: string
      start_price_wei:
        type: string
      reserve_price_wei:
        type: string
      is_started:
        type: boolean
      quantity:
        type: integer
        format: bigInt
  MetadataAttributes:
    type: object
    properties:
      trait_type:
        type: string
      value:
        type: string
  MarketplaceCollection:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/MarketplaceCollectionAttributes'
  MarketplaceCollectionAttributes:
    type: object
    properties:
      id:
        type: object
        x-go-type:
          type: Int
          import:
            package: math/big
          hints:
            kind: object
            noValidation: true
            nullable: true
      categoryId:
        type: integer
        format: bigInt
      address:
        type: object
        x-go-type:
          type: Address
          import:
            package: github.com/ethereum/go-ethereum/common
          hints:
            kind: object
            noValidation: true
      name:
        type: string
      symbol:
        type: string
      description:
        type: string
      slug:
        type: string
      fee:
        type: string
      maxItems:
        type: integer
        format: bigInt  
      owner:
        type: object
        $ref: "#/definitions/PublicUser"
      creator:
        type: object
        $ref: "#/definitions/PublicUser"
      logo:
        $ref: '#/definitions/PublicFile'
      featured:
        $ref: '#/definitions/PublicFile'
      banner:
        $ref: '#/definitions/PublicFile'
      isApproved:
        type: boolean
      isLocked:
        type: boolean
      url:
        type: string
      created:
        type: string
      collectibles:
        type: array
        items:
          $ref: "#/definitions/MarketplaceCollectible"
  PublicUser:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      uuid:
        type: string
      username:
        type: string
      email:
        type: string
      gravatar:
        type: string
      token:
        type: string
      address:
        type: string
      nonce:
        type: string
      wallpaperId:
        type: integer
        format: bigInt
      wallpaper:
        type: string
      funds:
        type: string
      created:
        type: string
  PublicFile:
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        properties:
          name:
            type: string
          alt:
            type: string
          caption:
            type: string
          width:
            type: integer
          height:
            type: integer
          hash:
            type: string
          ext:
            type: string
          mime:
            type: string
          size:
            type: number
          url:
            type: string
          provider:
            type: string
  # frontend definitions
  PublicMenu:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/PublicMenuAttributes'
  PublicMenuAttributes:
    type: object
    properties:
      orderBy:
        type: integer
        format: bigInt
      name:
        type: string
      link:
        type: string
      items:
        type: array
        items:
          $ref: "#/definitions/PublicMenu"
  PublicSlider:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        properties:
          slidesItem:
            type: array
            items:
              $ref: '#/definitions/PublicSliderItem'
  PublicSliderItem:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      heading:
        type: string
      description:
        type: string
      btnLink1:
        type: string
      btnText1:
        type: string
      btnLink2:
        type: string
      btnText2:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
      bg:
        $ref: '#/definitions/PublicFile'
  PublicPage:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/PublicPageAttributes'
  PublicPageAttributes:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
      content:
        type: string
      link:
        type: string
      category:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
  PublicContracts:
    type: object
    properties:
      contracts:
        type: object
        properties:
          marketplace:
            $ref: '#/definitions/PublicMarketplaceContract'
          collections:
            type: object
            additionalProperties:
              $ref: '#/definitions/PublicContract'
          auctions:
            type: array
            items:
              $ref: '#/definitions/PublicContract'
  PublicContract:
    type: object
    properties:
        name:
          type: string
        address:
          type: string
        abi:
          type: string
  PublicMarketplaceContract:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
      abi:
        type: string
      fee:
        type: object
        x-go-type:
          type: Int
          import:
            package: math/big
          hints:
            kind: object
            noValidation: true
      owner:
        type: object
        x-go-type:
          type: Address
          import:
            package: github.com/ethereum/go-ethereum/common
          hints:
            kind: object
            noValidation: true
  PublicCategories:
    type: array
    items:
      $ref: "#/definitions/PublicCategory"      
  PublicCategory:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/PublicCategoryAttributes'
  PublicCategoryAttributes:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      title:
        type: string
      slug:
        type: string
      description:
        type: string
      content:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
      collections:
        type: array
        items:
          $ref: '#/definitions/MarketplaceCollection'
  PublicAuthor:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/PublicAuthorAttributes'
  PublicAuthorAttributes:
    type: object
    properties:
      title:
        type: string
      link:
        type: string
      name:
        type: string
      description:
        type: string
      btnLink:
        type: string
      btnText:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
  PublicAuthorItem:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      title:
        type: string
      link:
        type: string
      name:
        type: string
      description:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
      socials:
        type: array
        items:
          $ref: "#/definitions/PublicSocial"
      wallets:
        type: array
        items:
          $ref: "#/definitions/PublicWallet"
  PublicTag:
    type: object
    properties:
      title:
        type: string
      link:
        type: string
  PublicSocial:
    type: object
    properties:
      name:
        type: string
      icon:
        type: string
      link:
        type: string
  PublicWallet:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
  PublicContact:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/PublicContactAttributes'
  PublicContactAttributes:
    type: object
    properties:
      heading:
        type: string
      subHeading:
        type: string
      link:
        type: string
      text:
        type: string
      csrf:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
  PublicContactForm:
    type: object
    properties:
      pageId:
        type: integer
        format: bigInt
      provider:
        type: string
      name:
        type: string
      email:
        type: string
      subject:
        type: string
      message:
        type: string
      csrf:
        type: string
  PublicSubscribeForm:
    type: object
    properties:
      provider:
        type: string
      email:
        type: string
      csrf:
        type: string
  PublicFaqItem:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      question:
        type: string
      answer:
        type: string
  PublicHelpCenterItem:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      title:
        type: string
      link:
        type: string
      description:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
  PublicBlogItem:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      orderBy:
        type: integer
        format: bigInt
      title:
        type: string
      link:
        type: string
      date:
        type: string
        format: date
      description:
        type: string
      description1:
        type: string
      description2:
        type: string
      description3:
        type: string
      content:
        type: string
      author:
        $ref: '#/definitions/PublicAuthor'
      image:
        $ref: '#/definitions/PublicFile'
      image1:
        $ref: '#/definitions/PublicFile'
      image2:
        $ref: '#/definitions/PublicFile'
      image3:
        $ref: '#/definitions/PublicFile'
      tags:
        type: array
        items:
          $ref: '#/definitions/PublicTag'
      popularTags:
        type: array
        items:
          $ref: '#/definitions/PublicTag'
  PublicAuthor:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      attributes:
        type: object
        $ref: '#/definitions/PublicAuthorAttributes'
  PublicAuthorAttributes:
    type: object
    properties:
      title:
        type: string
      link:
        type: string
      name:
        type: string
      description:
        type: string
      btnLink:
        type: string
      btnText:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
  PublicAuthorItem:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      title:
        type: string
      link:
        type: string
      name:
        type: string
      description:
        type: string
      btnLink:
        type: string
      btnText:
        type: string
      image:
        $ref: '#/definitions/PublicFile'
      socials:
        type: array
        items:
          $ref: "#/definitions/PublicSocial"
      wallets:
        type: array
        items:
          $ref: "#/definitions/PublicWallet"
  PublicTag:
    type: object
    properties:
      title:
        type: string
      link:
        type: string
  PublicSocial:
    type: object
    properties:
      name:
        type: string
      icon:
        type: string
      link:
        type: string
  PublicWallet:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
  Author:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      title:
        type: string
      description:
        type: string
      name:
        type: string
      slug:
        type: string
      image_id:
        type: integer
        format: bigInt
      enabled:
        type: boolean
      order_by:
        type: integer
        format: int64
      socials:
        type: array
        items:
          $ref: "#/definitions/Social"
      wallets:
        type: array
        items:
          $ref: "#/definitions/Wallet"
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  Social:
    type: object
    properties:
      name:
        type: string
      icon:
        type: string
      link:
        type: string
  Wallet:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
  Nonce:
    type: object
    properties:
      nonce:
        type: string
      address:
        type: string
      uuid:
        type: string
  Slider:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      title:
        type: string
      provider:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  Slider-item:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      heading:
        type: string
      description:
        type: string
      slider_id:
        type: integer
        format: bigInt
      btn_link_1:
        type: string
      btn_text_1:
        type: string
      btn_link_2:
        type: string
      btn_text_2:
        type: string
      image_id:
        type: integer
        format: bigInt
      bg_image_id:
        type: integer
        format: bigInt
      enabled:
        type: boolean
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  FileResponse:
    type: string
  File:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      thumb:
        type: string
      alt:
        type: string
      caption:
        type: string
      hash:
        type: string
      type:
        type: string
      ext:
        type: string
      size:
        type: number
      width:
        type: integer
        format: int64
      height:
        type: integer
        format: int64
      provider:
        type: string
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  Contact:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      page_id:
        type: integer
        format: bigInt
      heading:
        type: string
      sub_heading:
        type: string
      btn_link:
        type: string
      btn_text:
        type: string
      image_id:
        type: integer
        format: bigInt
      enabled:
        type: boolean
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  FormSuccess:
    properties:
      message:
        type: string
  VerifySignature:
    type: object
    properties:
      msg:
        type: string
      signature:
        type: string
      address:
        type: string
  LoginMetamaskOK:
    properties:
      id:
        type: integer
        format: bigInt
      uuid:
        type: string
      username:
        type: string
      email:
        type: string
      token:
        type: string
      address:
        type: string
      nonce:
        type: string
    type: object
  Credentials:
    properties:
      client_id:
        type: string
      client_secret:
        type: string
      domain:
        type: string
    required:
      - client_id
      - client_secret
      - domain
    type: object
  Callback:
    type: object
    properties:
      access_token:
        type: string
      token_type:
        type: string
      refresh_token:
        type: string
      expiry:
        type: string
        x-go-type:
          type: Time
          import:
            package: time
          hints:
            noValidation: true
      code:
        type: string
      state:
        type: string
      originalUrl:
        type: string
  Faq:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      question:
        type: string
      answer:
        type: string
      enabled:
        type: boolean
      order_by:
        type: integer
        format: int64
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  HelpCenter:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      title:
        type: string
      slug:
        type: string
      description:
        type: string
      image_id:
        type: integer
        format: bigInt
      enabled:
        type: boolean
      order_by:
        type: integer
        format: int64
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  Blog:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      tag_id:
        type: array
        items:
          type: integer
          format: bigInt
      title:
        type: string
      slug:
        type: string
      description:
        type: string
      content:
        type: string
      author_id:
        type: integer
        format: bigInt
      image_id:
        type: integer
        format: bigInt
      image_1_id:
        type: integer
        format: bigInt
      image_2_id:
        type: integer
        format: bigInt
      image_3_id:
        type: integer
        format: bigInt
      enabled:
        type: boolean
      order_by:
        type: integer
        format: int64
      public_date:
        type: string
        format: date
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      parent_id:
        type: integer
        format: bigInt
      blog_id:
        type: array
        items:
          type: integer
          format: bigInt
      page_id:
        type: array
        items:
          type: integer
          format: bigInt
      title:
        type: string
      slug:
        type: string
      enabled:
        type: boolean
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
  Page:
    type: object
    properties:
      id:
        type: integer
        format: bigInt
      tag_id:
        type: array
        items:
          type: integer
          format: bigInt
      category_id:
        type: integer
        format: bigInt
      title:
        type: string
      slug:
        type: string
      description:
        type: string
      content:
        type: string
      image_id:
        type: integer
        format: bigInt
      enabled:
        type: boolean
      order_by:
        type: integer
        format: int64
      created_by_id:
        type: integer
        format: int64
      updated_by_id:
        type: integer
        format: int64
      created:
        type: string
        format: date
      updated:
        type: string
        format: date
      deleted:
        type: string
        format: date
tags:
  - name: Auth
    description: "Endpoints accessible to all clients for frontend API functionality."
  - name: Frontend
    description: "Endpoints accessible to all clients for frontend API functionality."
  - name: Public
    description: "Endpoints accessible to all clients for general API functionality."
  - name: Monitoring 
    description: "Endpoints accessible to all clients for monitoring API functionality."
