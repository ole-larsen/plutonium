// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicContracts public contracts
//
// swagger:model PublicContracts
type PublicContracts struct {

	// contracts
	Contracts *PublicContractsContracts `json:"contracts,omitempty"`
}

// Validate validates this public contracts
func (m *PublicContracts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContracts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicContracts) validateContracts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contracts) { // not required
		return nil
	}

	if m.Contracts != nil {
		if err := m.Contracts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contracts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contracts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this public contracts based on the context it is used
func (m *PublicContracts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContracts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicContracts) contextValidateContracts(ctx context.Context, formats strfmt.Registry) error {

	if m.Contracts != nil {

		if swag.IsZero(m.Contracts) { // not required
			return nil
		}

		if err := m.Contracts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contracts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contracts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicContracts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicContracts) UnmarshalBinary(b []byte) error {
	var res PublicContracts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublicContractsContracts public contracts contracts
//
// swagger:model PublicContractsContracts
type PublicContractsContracts struct {
	Collections map[string]PublicContract  `json:"collections,omitempty"`
	Marketplace *PublicMarketplaceContract `json:"marketplace,omitempty"`
	Auctions    []*PublicContract          `json:"auctions"`
}

// Validate validates this public contracts contracts
func (m *PublicContractsContracts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuctions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicContractsContracts) validateAuctions(formats strfmt.Registry) error {
	if swag.IsZero(m.Auctions) { // not required
		return nil
	}

	for i := 0; i < len(m.Auctions); i++ {
		if swag.IsZero(m.Auctions[i]) { // not required
			continue
		}

		if m.Auctions[i] != nil {
			if err := m.Auctions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contracts" + "." + "auctions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contracts" + "." + "auctions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicContractsContracts) validateCollections(formats strfmt.Registry) error {
	if swag.IsZero(m.Collections) { // not required
		return nil
	}

	for k := range m.Collections {

		if err := validate.Required("contracts"+"."+"collections"+"."+k, "body", m.Collections[k]); err != nil {
			return err
		}
		if val, ok := m.Collections[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contracts" + "." + "collections" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contracts" + "." + "collections" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicContractsContracts) validateMarketplace(formats strfmt.Registry) error {
	if swag.IsZero(m.Marketplace) { // not required
		return nil
	}

	if m.Marketplace != nil {
		if err := m.Marketplace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contracts" + "." + "marketplace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contracts" + "." + "marketplace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this public contracts contracts based on the context it is used
func (m *PublicContractsContracts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuctions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicContractsContracts) contextValidateAuctions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Auctions); i++ {

		if m.Auctions[i] != nil {

			if swag.IsZero(m.Auctions[i]) { // not required
				return nil
			}

			if err := m.Auctions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contracts" + "." + "auctions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contracts" + "." + "auctions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicContractsContracts) contextValidateCollections(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Collections {

		if val, ok := m.Collections[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *PublicContractsContracts) contextValidateMarketplace(ctx context.Context, formats strfmt.Registry) error {

	if m.Marketplace != nil {

		if swag.IsZero(m.Marketplace) { // not required
			return nil
		}

		if err := m.Marketplace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contracts" + "." + "marketplace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contracts" + "." + "marketplace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicContractsContracts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicContractsContracts) UnmarshalBinary(b []byte) error {
	var res PublicContractsContracts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
