// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Blog blog
//
// swagger:model Blog
type Blog struct {
	PublicDate  strfmt.Date `json:"public_date,omitempty"`
	Created     strfmt.Date `json:"created,omitempty"`
	Updated     strfmt.Date `json:"updated,omitempty"`
	Deleted     strfmt.Date `json:"deleted,omitempty"`
	Content     string      `json:"content,omitempty"`
	Description string      `json:"description,omitempty"`
	Title       string      `json:"title,omitempty"`
	Slug        string      `json:"slug,omitempty"`
	TagID       []int64     `json:"tag_id"`
	Image1ID    int64       `json:"image_1_id,omitempty"`
	Image3ID    int64       `json:"image_3_id,omitempty"`
	ImageID     int64       `json:"image_id,omitempty"`
	OrderBy     int64       `json:"order_by,omitempty"`
	Image2ID    int64       `json:"image_2_id,omitempty"`
	AuthorID    int64       `json:"author_id,omitempty"`
	ID          int64       `json:"id,omitempty"`
	CreatedByID int64       `json:"created_by_id,omitempty"`
	UpdatedByID int64       `json:"updated_by_id,omitempty"`
	Enabled     bool        `json:"enabled,omitempty"`
}

// Validate validates this blog
func (m *Blog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Blog) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Blog) validateDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.Deleted) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted", "body", "date", m.Deleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Blog) validatePublicDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicDate) { // not required
		return nil
	}

	if err := validate.FormatOf("public_date", "body", "date", m.PublicDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Blog) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this blog based on context it is used
func (m *Blog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Blog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Blog) UnmarshalBinary(b []byte) error {
	var res Blog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
