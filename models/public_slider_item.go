// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PublicSliderItem public slider item
//
// swagger:model PublicSliderItem
type PublicSliderItem struct {
	Bg          *PublicFile `json:"bg,omitempty"`
	Image       *PublicFile `json:"image,omitempty"`
	BtnLink1    string      `json:"btnLink1,omitempty"`
	BtnLink2    string      `json:"btnLink2,omitempty"`
	BtnText1    string      `json:"btnText1,omitempty"`
	BtnText2    string      `json:"btnText2,omitempty"`
	Description string      `json:"description,omitempty"`
	Heading     string      `json:"heading,omitempty"`
	ID          int64       `json:"id,omitempty"`
}

// Validate validates this public slider item
func (m *PublicSliderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicSliderItem) validateBg(formats strfmt.Registry) error {
	if swag.IsZero(m.Bg) { // not required
		return nil
	}

	if m.Bg != nil {
		if err := m.Bg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bg")
			}
			return err
		}
	}

	return nil
}

func (m *PublicSliderItem) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this public slider item based on the context it is used
func (m *PublicSliderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicSliderItem) contextValidateBg(ctx context.Context, formats strfmt.Registry) error {

	if m.Bg != nil {

		if swag.IsZero(m.Bg) { // not required
			return nil
		}

		if err := m.Bg.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bg")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bg")
			}
			return err
		}
	}

	return nil
}

func (m *PublicSliderItem) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {

		if swag.IsZero(m.Image) { // not required
			return nil
		}

		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicSliderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicSliderItem) UnmarshalBinary(b []byte) error {
	var res PublicSliderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
