// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"math/big"
	"strconv"

	"github.com/ethereum/go-ethereum/common"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MarketplaceCollectionAttributes marketplace collection attributes
//
// swagger:model MarketplaceCollectionAttributes
type MarketplaceCollectionAttributes struct {
	Featured     *PublicFile               `json:"featured,omitempty"`
	Banner       *PublicFile               `json:"banner,omitempty"`
	Owner        *PublicUser               `json:"owner,omitempty"`
	Logo         *PublicFile               `json:"logo,omitempty"`
	ID           *big.Int                  `json:"id,omitempty"`
	Creator      *PublicUser               `json:"creator,omitempty"`
	Created      string                    `json:"created,omitempty"`
	Description  string                    `json:"description,omitempty"`
	Fee          string                    `json:"fee,omitempty"`
	Name         string                    `json:"name,omitempty"`
	Slug         string                    `json:"slug,omitempty"`
	Symbol       string                    `json:"symbol,omitempty"`
	URL          string                    `json:"url,omitempty"`
	Collectibles []*MarketplaceCollectible `json:"collectibles"`
	MaxItems     int64                     `json:"maxItems,omitempty"`
	CategoryID   int64                     `json:"categoryId,omitempty"`
	Address      common.Address            `json:"address,omitempty"`
	IsApproved   bool                      `json:"isApproved,omitempty"`
	IsLocked     bool                      `json:"isLocked,omitempty"`
}

// Validate validates this marketplace collection attributes
func (m *MarketplaceCollectionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBanner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectibles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatured(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketplaceCollectionAttributes) validateBanner(formats strfmt.Registry) error {
	if swag.IsZero(m.Banner) { // not required
		return nil
	}

	if m.Banner != nil {
		if err := m.Banner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banner")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) validateCollectibles(formats strfmt.Registry) error {
	if swag.IsZero(m.Collectibles) { // not required
		return nil
	}

	for i := 0; i < len(m.Collectibles); i++ {
		if swag.IsZero(m.Collectibles[i]) { // not required
			continue
		}

		if m.Collectibles[i] != nil {
			if err := m.Collectibles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collectibles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("collectibles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MarketplaceCollectionAttributes) validateCreator(formats strfmt.Registry) error {
	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) validateFeatured(formats strfmt.Registry) error {
	if swag.IsZero(m.Featured) { // not required
		return nil
	}

	if m.Featured != nil {
		if err := m.Featured.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featured")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featured")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) validateLogo(formats strfmt.Registry) error {
	if swag.IsZero(m.Logo) { // not required
		return nil
	}

	if m.Logo != nil {
		if err := m.Logo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logo")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this marketplace collection attributes based on the context it is used
func (m *MarketplaceCollectionAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBanner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollectibles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatured(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketplaceCollectionAttributes) contextValidateBanner(ctx context.Context, formats strfmt.Registry) error {

	if m.Banner != nil {

		if swag.IsZero(m.Banner) { // not required
			return nil
		}

		if err := m.Banner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("banner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("banner")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) contextValidateCollectibles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Collectibles); i++ {

		if m.Collectibles[i] != nil {

			if swag.IsZero(m.Collectibles[i]) { // not required
				return nil
			}

			if err := m.Collectibles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collectibles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("collectibles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MarketplaceCollectionAttributes) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if m.Creator != nil {

		if swag.IsZero(m.Creator) { // not required
			return nil
		}

		if err := m.Creator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) contextValidateFeatured(ctx context.Context, formats strfmt.Registry) error {

	if m.Featured != nil {

		if swag.IsZero(m.Featured) { // not required
			return nil
		}

		if err := m.Featured.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featured")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featured")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) contextValidateLogo(ctx context.Context, formats strfmt.Registry) error {

	if m.Logo != nil {

		if swag.IsZero(m.Logo) { // not required
			return nil
		}

		if err := m.Logo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logo")
			}
			return err
		}
	}

	return nil
}

func (m *MarketplaceCollectionAttributes) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketplaceCollectionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketplaceCollectionAttributes) UnmarshalBinary(b []byte) error {
	var res MarketplaceCollectionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
