// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// File file
//
// swagger:model File
type File struct {
	Deleted     strfmt.Date `json:"deleted,omitempty"`
	Updated     strfmt.Date `json:"updated,omitempty"`
	Created     strfmt.Date `json:"created,omitempty"`
	Thumb       string      `json:"thumb,omitempty"`
	Type        string      `json:"type,omitempty"`
	Ext         string      `json:"ext,omitempty"`
	Hash        string      `json:"hash,omitempty"`
	Caption     string      `json:"caption,omitempty"`
	Alt         string      `json:"alt,omitempty"`
	Name        string      `json:"name,omitempty"`
	Provider    string      `json:"provider,omitempty"`
	Size        float64     `json:"size,omitempty"`
	ID          int64       `json:"id,omitempty"`
	CreatedByID int64       `json:"created_by_id,omitempty"`
	Height      int64       `json:"height,omitempty"`
	UpdatedByID int64       `json:"updated_by_id,omitempty"`
	Width       int64       `json:"width,omitempty"`
}

// Validate validates this file
func (m *File) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *File) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *File) validateDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.Deleted) { // not required
		return nil
	}

	if err := validate.FormatOf("deleted", "body", "date", m.Deleted.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *File) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this file based on context it is used
func (m *File) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *File) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *File) UnmarshalBinary(b []byte) error {
	var res File
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
