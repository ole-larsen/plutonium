// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PingResponse ping response
//
// swagger:model PingResponse
type PingResponse struct {
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
	Message   string          `json:"message,omitempty"`
}

// Validate validates this ping response
func (m *PingResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pingResponseTypeMessagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pong"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pingResponseTypeMessagePropEnum = append(pingResponseTypeMessagePropEnum, v)
	}
}

const (

	// PingResponseMessagePong captures enum value "pong"
	PingResponseMessagePong string = "pong"
)

// prop value enum
func (m *PingResponse) validateMessageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pingResponseTypeMessagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PingResponse) validateMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.Message) { // not required
		return nil
	}

	// value enum
	if err := m.validateMessageEnum("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *PingResponse) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ping response based on context it is used
func (m *PingResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PingResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PingResponse) UnmarshalBinary(b []byte) error {
	var res PingResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
