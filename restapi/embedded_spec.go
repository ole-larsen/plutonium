// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Plutonium Service API provides endpoints to support the operations of the NFT Marketplace.\nThis document outlines the API's structure, response formats, and capabilities for integration.\n",
    "title": "Plutonium Service API",
    "version": "1.0.0"
  },
  "host": "plutonium",
  "basePath": "/api/v1",
  "paths": {
    "/frontend/categories": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "get market data categories",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PublicCategories"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/contracts": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "get web3 market data",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PublicContracts"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/files/:file/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "Serve Static Images",
        "parameters": [
          {
            "type": "string",
            "name": "format",
            "in": "query"
          },
          {
            "type": "number",
            "name": "w",
            "in": "query"
          },
          {
            "type": "number",
            "name": "dpr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/menu": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "Fetches the public menu for the frontend.",
        "parameters": [
          {
            "type": "string",
            "description": "The provider to be used in the menu.",
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the menu.",
            "schema": {
              "$ref": "#/definitions/PublicMenu"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/slider": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "slider with slides",
        "parameters": [
          {
            "type": "string",
            "description": "The provider to be used in the slider.",
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PublicSlider"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/users": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "this route fetch public users who has address",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicUser"
              }
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "description": "This endpoint provides Prometheus-compatible metrics for monitoring the application. \nIt is typically used by Prometheus or similar monitoring tools to scrape metrics data.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Monitoring"
        ],
        "summary": "Retrieve Prometheus Metrics",
        "responses": {
          "200": {
            "description": "Metrics retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PrometheusResponse"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "description": "The ping endpoint provides a simple \"pong\" response to confirm server availability.\nUse this endpoint to:\n- Verify connectivity between the client and server.\n- Measure network latency for diagnostics.\n- Perform quick and reliable health checks over HTTP.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Public"
        ],
        "summary": "Ping endpoint for server health and latency testing.",
        "responses": {
          "200": {
            "description": "Successful response indicating server availability.",
            "schema": {
              "$ref": "#/definitions/PingResponse"
            }
          },
          "500": {
            "description": "Internal Server Error. This typically indicates a server-side issue or\nan unexpected runtime error preventing proper functionality.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Contract": {
      "type": "object",
      "properties": {
        "abi": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "name": {
          "type": "string"
        },
        "tx": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP status code representing the type of error encountered.",
          "type": "integer",
          "example": 500
        },
        "details": {
          "description": "Additional context or information about the error, if available.",
          "type": "string",
          "example": "Unexpected error while processing the request."
        },
        "message": {
          "description": "Brief explanation of the error encountered.",
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "FileResponse": {
      "type": "string"
    },
    "MarketplaceCollectible": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/MarketplaceCollectibleAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "MarketplaceCollectibleAttributes": {
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "integer",
          "format": "bigInt"
        },
        "creator": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "details": {
          "$ref": "#/definitions/MarketplaceCollectibleDetails"
        },
        "itemId": {
          "type": "integer",
          "format": "bigInt"
        },
        "metadata": {
          "$ref": "#/definitions/MarketplaceCollectibleMetadata"
        },
        "owner": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "tokenIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "bigInt"
          }
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "MarketplaceCollectibleDetails": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "auction": {
          "type": "boolean"
        },
        "cancelled": {
          "type": "boolean"
        },
        "collection": {
          "type": "string"
        },
        "end_time": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "string"
        },
        "fee_wei": {
          "type": "string"
        },
        "fulfilled": {
          "type": "boolean"
        },
        "is_started": {
          "type": "boolean"
        },
        "price": {
          "type": "string"
        },
        "price_wei": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "bigInt"
        },
        "reserve_price": {
          "type": "string"
        },
        "reserve_price_wei": {
          "type": "string"
        },
        "start_price": {
          "type": "string"
        },
        "start_price_wei": {
          "type": "string"
        },
        "start_time": {
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "string"
        },
        "total": {
          "type": "string"
        },
        "total_wei": {
          "type": "string"
        }
      }
    },
    "MarketplaceCollectibleMetadata": {
      "type": "object",
      "properties": {
        "animation_url": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataAttributes"
          }
        },
        "background_color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "external_url": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "youtube_url": {
          "type": "string"
        }
      }
    },
    "MarketplaceCollection": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/MarketplaceCollectionAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "MarketplaceCollectionAttributes": {
      "type": "object",
      "properties": {
        "address": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true
            },
            "import": {
              "package": "github.com/ethereum/go-ethereum/common"
            },
            "type": "Address"
          }
        },
        "banner": {
          "$ref": "#/definitions/PublicFile"
        },
        "categoryId": {
          "type": "integer",
          "format": "bigInt"
        },
        "collectibles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketplaceCollectible"
          }
        },
        "created": {
          "type": "string"
        },
        "creator": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "description": {
          "type": "string"
        },
        "featured": {
          "$ref": "#/definitions/PublicFile"
        },
        "fee": {
          "type": "string"
        },
        "id": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true,
              "nullable": true
            },
            "import": {
              "package": "math/big"
            },
            "type": "Int"
          }
        },
        "isApproved": {
          "type": "boolean"
        },
        "isLocked": {
          "type": "boolean"
        },
        "logo": {
          "$ref": "#/definitions/PublicFile"
        },
        "maxItems": {
          "type": "integer",
          "format": "bigInt"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "slug": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "animation_url": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataAttributes"
          }
        },
        "background_color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "external_url": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "youtube_url": {
          "type": "string"
        }
      }
    },
    "MetadataAttributes": {
      "type": "object",
      "properties": {
        "trait_type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PingResponse": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Response message confirming successful server connectivity.",
          "type": "string",
          "enum": [
            "pong"
          ],
          "example": "pong"
        },
        "timestamp": {
          "description": "The timestamp of the server response, useful for tracking latency.",
          "type": "string",
          "format": "date-time",
          "example": "2024-11-19T12:34:56Z"
        }
      }
    },
    "PrometheusResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "format": "number"
      }
    },
    "PublicCategories": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicCategory"
      }
    },
    "PublicCategory": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/PublicCategoryAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicCategoryAttributes": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketplaceCollection"
          }
        },
        "content": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "image": {
          "$ref": "#/definitions/PublicFile"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "PublicContract": {
      "type": "object",
      "properties": {
        "abi": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PublicContracts": {
      "type": "object",
      "properties": {
        "contracts": {
          "type": "object",
          "properties": {
            "auctions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicContract"
              }
            },
            "collections": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/PublicContract"
              }
            },
            "marketplace": {
              "$ref": "#/definitions/PublicMarketplaceContract"
            }
          }
        }
      }
    },
    "PublicFile": {
      "properties": {
        "attributes": {
          "type": "object",
          "properties": {
            "alt": {
              "type": "string"
            },
            "caption": {
              "type": "string"
            },
            "ext": {
              "type": "string"
            },
            "hash": {
              "type": "string"
            },
            "height": {
              "type": "integer"
            },
            "mime": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            },
            "size": {
              "type": "number"
            },
            "url": {
              "type": "string"
            },
            "width": {
              "type": "integer"
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicMarketplaceContract": {
      "type": "object",
      "properties": {
        "abi": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "fee": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true
            },
            "import": {
              "package": "math/big"
            },
            "type": "Int"
          }
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true
            },
            "import": {
              "package": "github.com/ethereum/go-ethereum/common"
            },
            "type": "Address"
          }
        }
      }
    },
    "PublicMenu": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/PublicMenuAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicMenuAttributes": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicMenu"
          }
        },
        "link": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orderBy": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicSlider": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "properties": {
            "slidesItem": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicSliderItem"
              }
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicSliderItem": {
      "type": "object",
      "properties": {
        "bg": {
          "$ref": "#/definitions/PublicFile"
        },
        "btnLink1": {
          "type": "string"
        },
        "btnLink2": {
          "type": "string"
        },
        "btnText1": {
          "type": "string"
        },
        "btnText2": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "heading": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "image": {
          "$ref": "#/definitions/PublicFile"
        }
      }
    },
    "PublicUser": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "funds": {
          "type": "string"
        },
        "gravatar": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "nonce": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "wallpaper": {
          "type": "string"
        },
        "wallpaperId": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "file": {
      "type": "object",
      "properties": {
        "alt": {
          "type": "string"
        },
        "caption": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "created_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "string",
          "format": "date"
        },
        "ext": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "size": {
          "type": "number"
        },
        "thumb": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date"
        },
        "updated_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "width": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "principal": {
      "description": "A unique identifier for a principal (user or entity).",
      "type": "string"
    },
    "slider": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date"
        },
        "created_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "provider": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date"
        },
        "updated_by_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "slider-item": {
      "type": "object",
      "properties": {
        "bg_image_id": {
          "type": "integer",
          "format": "bigInt"
        },
        "btn_link_1": {
          "type": "string"
        },
        "btn_link_2": {
          "type": "string"
        },
        "btn_text_1": {
          "type": "string"
        },
        "btn_text_2": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "created_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "heading": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "image_id": {
          "type": "integer",
          "format": "bigInt"
        },
        "slider_id": {
          "type": "integer",
          "format": "bigInt"
        },
        "updated": {
          "type": "string",
          "format": "date"
        },
        "updated_by_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "x-token": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Endpoints accessible to all clients for frontend API functionality.",
      "name": "Frontend"
    },
    {
      "description": "Endpoints accessible to all clients for general API functionality.",
      "name": "Public"
    },
    {
      "description": "Endpoints accessible to all clients for monitoring API functionality.",
      "name": "Monitoring"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Plutonium Service API provides endpoints to support the operations of the NFT Marketplace.\nThis document outlines the API's structure, response formats, and capabilities for integration.\n",
    "title": "Plutonium Service API",
    "version": "1.0.0"
  },
  "host": "plutonium",
  "basePath": "/api/v1",
  "paths": {
    "/frontend/categories": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "get market data categories",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PublicCategories"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/contracts": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "get web3 market data",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PublicContracts"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/files/:file/": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "Serve Static Images",
        "parameters": [
          {
            "type": "string",
            "name": "format",
            "in": "query"
          },
          {
            "type": "number",
            "name": "w",
            "in": "query"
          },
          {
            "type": "number",
            "name": "dpr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/menu": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "Fetches the public menu for the frontend.",
        "parameters": [
          {
            "type": "string",
            "description": "The provider to be used in the menu.",
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the menu.",
            "schema": {
              "$ref": "#/definitions/PublicMenu"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/slider": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "slider with slides",
        "parameters": [
          {
            "type": "string",
            "description": "The provider to be used in the slider.",
            "name": "provider",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/PublicSlider"
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/frontend/users": {
      "get": {
        "security": [
          {
            "x-token": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Frontend"
        ],
        "summary": "this route fetch public users who has address",
        "parameters": [
          {
            "type": "string",
            "name": "address",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicUser"
              }
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized. The request is missing valid authentication.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found. The requested resource could not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "description": "This endpoint provides Prometheus-compatible metrics for monitoring the application. \nIt is typically used by Prometheus or similar monitoring tools to scrape metrics data.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Monitoring"
        ],
        "summary": "Retrieve Prometheus Metrics",
        "responses": {
          "200": {
            "description": "Metrics retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/PrometheusResponse"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "description": "The ping endpoint provides a simple \"pong\" response to confirm server availability.\nUse this endpoint to:\n- Verify connectivity between the client and server.\n- Measure network latency for diagnostics.\n- Perform quick and reliable health checks over HTTP.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Public"
        ],
        "summary": "Ping endpoint for server health and latency testing.",
        "responses": {
          "200": {
            "description": "Successful response indicating server availability.",
            "schema": {
              "$ref": "#/definitions/PingResponse"
            }
          },
          "500": {
            "description": "Internal Server Error. This typically indicates a server-side issue or\nan unexpected runtime error preventing proper functionality.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Contract": {
      "type": "object",
      "properties": {
        "abi": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "name": {
          "type": "string"
        },
        "tx": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP status code representing the type of error encountered.",
          "type": "integer",
          "example": 500
        },
        "details": {
          "description": "Additional context or information about the error, if available.",
          "type": "string",
          "example": "Unexpected error while processing the request."
        },
        "message": {
          "description": "Brief explanation of the error encountered.",
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "FileResponse": {
      "type": "string"
    },
    "MarketplaceCollectible": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/MarketplaceCollectibleAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "MarketplaceCollectibleAttributes": {
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "integer",
          "format": "bigInt"
        },
        "creator": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "details": {
          "$ref": "#/definitions/MarketplaceCollectibleDetails"
        },
        "itemId": {
          "type": "integer",
          "format": "bigInt"
        },
        "metadata": {
          "$ref": "#/definitions/MarketplaceCollectibleMetadata"
        },
        "owner": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "tokenIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "bigInt"
          }
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "MarketplaceCollectibleDetails": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "auction": {
          "type": "boolean"
        },
        "cancelled": {
          "type": "boolean"
        },
        "collection": {
          "type": "string"
        },
        "end_time": {
          "type": "integer",
          "format": "int64"
        },
        "fee": {
          "type": "string"
        },
        "fee_wei": {
          "type": "string"
        },
        "fulfilled": {
          "type": "boolean"
        },
        "is_started": {
          "type": "boolean"
        },
        "price": {
          "type": "string"
        },
        "price_wei": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "bigInt"
        },
        "reserve_price": {
          "type": "string"
        },
        "reserve_price_wei": {
          "type": "string"
        },
        "start_price": {
          "type": "string"
        },
        "start_price_wei": {
          "type": "string"
        },
        "start_time": {
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "string"
        },
        "total": {
          "type": "string"
        },
        "total_wei": {
          "type": "string"
        }
      }
    },
    "MarketplaceCollectibleMetadata": {
      "type": "object",
      "properties": {
        "animation_url": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataAttributes"
          }
        },
        "background_color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "external_url": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "youtube_url": {
          "type": "string"
        }
      }
    },
    "MarketplaceCollection": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/MarketplaceCollectionAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "MarketplaceCollectionAttributes": {
      "type": "object",
      "properties": {
        "address": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true
            },
            "import": {
              "package": "github.com/ethereum/go-ethereum/common"
            },
            "type": "Address"
          }
        },
        "banner": {
          "$ref": "#/definitions/PublicFile"
        },
        "categoryId": {
          "type": "integer",
          "format": "bigInt"
        },
        "collectibles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketplaceCollectible"
          }
        },
        "created": {
          "type": "string"
        },
        "creator": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "description": {
          "type": "string"
        },
        "featured": {
          "$ref": "#/definitions/PublicFile"
        },
        "fee": {
          "type": "string"
        },
        "id": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true,
              "nullable": true
            },
            "import": {
              "package": "math/big"
            },
            "type": "Int"
          }
        },
        "isApproved": {
          "type": "boolean"
        },
        "isLocked": {
          "type": "boolean"
        },
        "logo": {
          "$ref": "#/definitions/PublicFile"
        },
        "maxItems": {
          "type": "integer",
          "format": "bigInt"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "object",
          "$ref": "#/definitions/PublicUser"
        },
        "slug": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "animation_url": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataAttributes"
          }
        },
        "background_color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "external_url": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "youtube_url": {
          "type": "string"
        }
      }
    },
    "MetadataAttributes": {
      "type": "object",
      "properties": {
        "trait_type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "PingResponse": {
      "type": "object",
      "properties": {
        "message": {
          "description": "Response message confirming successful server connectivity.",
          "type": "string",
          "enum": [
            "pong"
          ],
          "example": "pong"
        },
        "timestamp": {
          "description": "The timestamp of the server response, useful for tracking latency.",
          "type": "string",
          "format": "date-time",
          "example": "2024-11-19T12:34:56Z"
        }
      }
    },
    "PrometheusResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "string",
        "format": "number"
      }
    },
    "PublicCategories": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PublicCategory"
      }
    },
    "PublicCategory": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/PublicCategoryAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicCategoryAttributes": {
      "type": "object",
      "properties": {
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketplaceCollection"
          }
        },
        "content": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "image": {
          "$ref": "#/definitions/PublicFile"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "PublicContract": {
      "type": "object",
      "properties": {
        "abi": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PublicContracts": {
      "type": "object",
      "properties": {
        "contracts": {
          "type": "object",
          "properties": {
            "auctions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicContract"
              }
            },
            "collections": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/PublicContract"
              }
            },
            "marketplace": {
              "$ref": "#/definitions/PublicMarketplaceContract"
            }
          }
        }
      }
    },
    "PublicContractsContracts": {
      "type": "object",
      "properties": {
        "auctions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicContract"
          }
        },
        "collections": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PublicContract"
          }
        },
        "marketplace": {
          "$ref": "#/definitions/PublicMarketplaceContract"
        }
      }
    },
    "PublicFile": {
      "properties": {
        "attributes": {
          "type": "object",
          "properties": {
            "alt": {
              "type": "string"
            },
            "caption": {
              "type": "string"
            },
            "ext": {
              "type": "string"
            },
            "hash": {
              "type": "string"
            },
            "height": {
              "type": "integer"
            },
            "mime": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "provider": {
              "type": "string"
            },
            "size": {
              "type": "number"
            },
            "url": {
              "type": "string"
            },
            "width": {
              "type": "integer"
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicFileAttributes": {
      "type": "object",
      "properties": {
        "alt": {
          "type": "string"
        },
        "caption": {
          "type": "string"
        },
        "ext": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "height": {
          "type": "integer"
        },
        "mime": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "size": {
          "type": "number"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "PublicMarketplaceContract": {
      "type": "object",
      "properties": {
        "abi": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "fee": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true
            },
            "import": {
              "package": "math/big"
            },
            "type": "Int"
          }
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "object",
          "x-go-type": {
            "hints": {
              "kind": "object",
              "noValidation": true
            },
            "import": {
              "package": "github.com/ethereum/go-ethereum/common"
            },
            "type": "Address"
          }
        }
      }
    },
    "PublicMenu": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/PublicMenuAttributes"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicMenuAttributes": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicMenu"
          }
        },
        "link": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orderBy": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicSlider": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "properties": {
            "slidesItem": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicSliderItem"
              }
            }
          }
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "PublicSliderAttributes": {
      "type": "object",
      "properties": {
        "slidesItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublicSliderItem"
          }
        }
      }
    },
    "PublicSliderItem": {
      "type": "object",
      "properties": {
        "bg": {
          "$ref": "#/definitions/PublicFile"
        },
        "btnLink1": {
          "type": "string"
        },
        "btnLink2": {
          "type": "string"
        },
        "btnText1": {
          "type": "string"
        },
        "btnText2": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "heading": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "image": {
          "$ref": "#/definitions/PublicFile"
        }
      }
    },
    "PublicUser": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "funds": {
          "type": "string"
        },
        "gravatar": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "nonce": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "wallpaper": {
          "type": "string"
        },
        "wallpaperId": {
          "type": "integer",
          "format": "bigInt"
        }
      }
    },
    "file": {
      "type": "object",
      "properties": {
        "alt": {
          "type": "string"
        },
        "caption": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "created_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "string",
          "format": "date"
        },
        "ext": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "size": {
          "type": "number"
        },
        "thumb": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date"
        },
        "updated_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "width": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "principal": {
      "description": "A unique identifier for a principal (user or entity).",
      "type": "string"
    },
    "slider": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date"
        },
        "created_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "provider": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date"
        },
        "updated_by_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "slider-item": {
      "type": "object",
      "properties": {
        "bg_image_id": {
          "type": "integer",
          "format": "bigInt"
        },
        "btn_link_1": {
          "type": "string"
        },
        "btn_link_2": {
          "type": "string"
        },
        "btn_text_1": {
          "type": "string"
        },
        "btn_text_2": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "created_by_id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "string",
          "format": "date"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "heading": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "bigInt"
        },
        "image_id": {
          "type": "integer",
          "format": "bigInt"
        },
        "slider_id": {
          "type": "integer",
          "format": "bigInt"
        },
        "updated": {
          "type": "string",
          "format": "date"
        },
        "updated_by_id": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "x-token": {
      "type": "apiKey",
      "name": "x-token",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Endpoints accessible to all clients for frontend API functionality.",
      "name": "Frontend"
    },
    {
      "description": "Endpoints accessible to all clients for general API functionality.",
      "name": "Public"
    },
    {
      "description": "Endpoints accessible to all clients for monitoring API functionality.",
      "name": "Monitoring"
    }
  ]
}`))
}
