// Code generated by go-swagger; DO NOT EDIT.

package frontend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ole-larsen/plutonium/models"
)

// GetHeaderOKCode is the HTTP code returned for type GetHeaderOK
const GetHeaderOKCode int = 200

/*
GetHeaderOK Successfully fetched the header.

swagger:response getHeaderOK
*/
type GetHeaderOK struct {

	/*
	  In: Body
	*/
	Payload *models.PublicHeaderResponse `json:"body,omitempty"`
}

// NewGetHeaderOK creates GetHeaderOK with default headers values
func NewGetHeaderOK() *GetHeaderOK {

	return &GetHeaderOK{}
}

// WithPayload adds the payload to the get header o k response
func (o *GetHeaderOK) WithPayload(payload *models.PublicHeaderResponse) *GetHeaderOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get header o k response
func (o *GetHeaderOK) SetPayload(payload *models.PublicHeaderResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHeaderOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetHeaderBadRequestCode is the HTTP code returned for type GetHeaderBadRequest
const GetHeaderBadRequestCode int = 400

/*
GetHeaderBadRequest Bad request due to missing or invalid parameters.

swagger:response getHeaderBadRequest
*/
type GetHeaderBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetHeaderBadRequest creates GetHeaderBadRequest with default headers values
func NewGetHeaderBadRequest() *GetHeaderBadRequest {

	return &GetHeaderBadRequest{}
}

// WithPayload adds the payload to the get header bad request response
func (o *GetHeaderBadRequest) WithPayload(payload *models.ErrorResponse) *GetHeaderBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get header bad request response
func (o *GetHeaderBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHeaderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetHeaderUnauthorizedCode is the HTTP code returned for type GetHeaderUnauthorized
const GetHeaderUnauthorizedCode int = 401

/*
GetHeaderUnauthorized Unauthorized. The request is missing valid authentication.

swagger:response getHeaderUnauthorized
*/
type GetHeaderUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetHeaderUnauthorized creates GetHeaderUnauthorized with default headers values
func NewGetHeaderUnauthorized() *GetHeaderUnauthorized {

	return &GetHeaderUnauthorized{}
}

// WithPayload adds the payload to the get header unauthorized response
func (o *GetHeaderUnauthorized) WithPayload(payload *models.ErrorResponse) *GetHeaderUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get header unauthorized response
func (o *GetHeaderUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHeaderUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetHeaderNotFoundCode is the HTTP code returned for type GetHeaderNotFound
const GetHeaderNotFoundCode int = 404

/*
GetHeaderNotFound Not found. The requested resource could not be found.

swagger:response getHeaderNotFound
*/
type GetHeaderNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetHeaderNotFound creates GetHeaderNotFound with default headers values
func NewGetHeaderNotFound() *GetHeaderNotFound {

	return &GetHeaderNotFound{}
}

// WithPayload adds the payload to the get header not found response
func (o *GetHeaderNotFound) WithPayload(payload *models.ErrorResponse) *GetHeaderNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get header not found response
func (o *GetHeaderNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHeaderNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetHeaderInternalServerErrorCode is the HTTP code returned for type GetHeaderInternalServerError
const GetHeaderInternalServerErrorCode int = 500

/*
GetHeaderInternalServerError Internal server error.

swagger:response getHeaderInternalServerError
*/
type GetHeaderInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetHeaderInternalServerError creates GetHeaderInternalServerError with default headers values
func NewGetHeaderInternalServerError() *GetHeaderInternalServerError {

	return &GetHeaderInternalServerError{}
}

// WithPayload adds the payload to the get header internal server error response
func (o *GetHeaderInternalServerError) WithPayload(payload *models.ErrorResponse) *GetHeaderInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get header internal server error response
func (o *GetHeaderInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetHeaderInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
