// Code generated by go-swagger; DO NOT EDIT.

package frontend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ole-larsen/plutonium/models"
)

// GetFrontendFaqOKCode is the HTTP code returned for type GetFrontendFaqOK
const GetFrontendFaqOKCode int = 200

/*
GetFrontendFaqOK ok

swagger:response getFrontendFaqOK
*/
type GetFrontendFaqOK struct {

	/*
	  In: Body
	*/
	Payload []*models.PublicFaqItem `json:"body,omitempty"`
}

// NewGetFrontendFaqOK creates GetFrontendFaqOK with default headers values
func NewGetFrontendFaqOK() *GetFrontendFaqOK {

	return &GetFrontendFaqOK{}
}

// WithPayload adds the payload to the get frontend faq o k response
func (o *GetFrontendFaqOK) WithPayload(payload []*models.PublicFaqItem) *GetFrontendFaqOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get frontend faq o k response
func (o *GetFrontendFaqOK) SetPayload(payload []*models.PublicFaqItem) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFrontendFaqOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.PublicFaqItem, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFrontendFaqBadRequestCode is the HTTP code returned for type GetFrontendFaqBadRequest
const GetFrontendFaqBadRequestCode int = 400

/*
GetFrontendFaqBadRequest Bad request due to missing or invalid parameters.

swagger:response getFrontendFaqBadRequest
*/
type GetFrontendFaqBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetFrontendFaqBadRequest creates GetFrontendFaqBadRequest with default headers values
func NewGetFrontendFaqBadRequest() *GetFrontendFaqBadRequest {

	return &GetFrontendFaqBadRequest{}
}

// WithPayload adds the payload to the get frontend faq bad request response
func (o *GetFrontendFaqBadRequest) WithPayload(payload *models.ErrorResponse) *GetFrontendFaqBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get frontend faq bad request response
func (o *GetFrontendFaqBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFrontendFaqBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFrontendFaqUnauthorizedCode is the HTTP code returned for type GetFrontendFaqUnauthorized
const GetFrontendFaqUnauthorizedCode int = 401

/*
GetFrontendFaqUnauthorized Unauthorized. The request is missing valid authentication.

swagger:response getFrontendFaqUnauthorized
*/
type GetFrontendFaqUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetFrontendFaqUnauthorized creates GetFrontendFaqUnauthorized with default headers values
func NewGetFrontendFaqUnauthorized() *GetFrontendFaqUnauthorized {

	return &GetFrontendFaqUnauthorized{}
}

// WithPayload adds the payload to the get frontend faq unauthorized response
func (o *GetFrontendFaqUnauthorized) WithPayload(payload *models.ErrorResponse) *GetFrontendFaqUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get frontend faq unauthorized response
func (o *GetFrontendFaqUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFrontendFaqUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFrontendFaqNotFoundCode is the HTTP code returned for type GetFrontendFaqNotFound
const GetFrontendFaqNotFoundCode int = 404

/*
GetFrontendFaqNotFound Not found. The requested resource could not be found.

swagger:response getFrontendFaqNotFound
*/
type GetFrontendFaqNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetFrontendFaqNotFound creates GetFrontendFaqNotFound with default headers values
func NewGetFrontendFaqNotFound() *GetFrontendFaqNotFound {

	return &GetFrontendFaqNotFound{}
}

// WithPayload adds the payload to the get frontend faq not found response
func (o *GetFrontendFaqNotFound) WithPayload(payload *models.ErrorResponse) *GetFrontendFaqNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get frontend faq not found response
func (o *GetFrontendFaqNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFrontendFaqNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetFrontendFaqInternalServerErrorCode is the HTTP code returned for type GetFrontendFaqInternalServerError
const GetFrontendFaqInternalServerErrorCode int = 500

/*
GetFrontendFaqInternalServerError Internal server error.

swagger:response getFrontendFaqInternalServerError
*/
type GetFrontendFaqInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetFrontendFaqInternalServerError creates GetFrontendFaqInternalServerError with default headers values
func NewGetFrontendFaqInternalServerError() *GetFrontendFaqInternalServerError {

	return &GetFrontendFaqInternalServerError{}
}

// WithPayload adds the payload to the get frontend faq internal server error response
func (o *GetFrontendFaqInternalServerError) WithPayload(payload *models.ErrorResponse) *GetFrontendFaqInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get frontend faq internal server error response
func (o *GetFrontendFaqInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFrontendFaqInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
