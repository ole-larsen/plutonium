// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostFrontendAuthWalletConnectHandlerFunc turns a function with the right signature into a post frontend auth wallet connect handler
type PostFrontendAuthWalletConnectHandlerFunc func(PostFrontendAuthWalletConnectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFrontendAuthWalletConnectHandlerFunc) Handle(params PostFrontendAuthWalletConnectParams) middleware.Responder {
	return fn(params)
}

// PostFrontendAuthWalletConnectHandler interface for that can handle valid post frontend auth wallet connect params
type PostFrontendAuthWalletConnectHandler interface {
	Handle(PostFrontendAuthWalletConnectParams) middleware.Responder
}

// NewPostFrontendAuthWalletConnect creates a new http.Handler for the post frontend auth wallet connect operation
func NewPostFrontendAuthWalletConnect(ctx *middleware.Context, handler PostFrontendAuthWalletConnectHandler) *PostFrontendAuthWalletConnect {
	return &PostFrontendAuthWalletConnect{Context: ctx, Handler: handler}
}

/*
	PostFrontendAuthWalletConnect swagger:route POST /frontend/auth/wallet-connect Auth postFrontendAuthWalletConnect

This API endpoint create, store and returns credentials for new user
*/
type PostFrontendAuthWalletConnect struct {
	Context *middleware.Context
	Handler PostFrontendAuthWalletConnectHandler
}

func (o *PostFrontendAuthWalletConnect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostFrontendAuthWalletConnectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
