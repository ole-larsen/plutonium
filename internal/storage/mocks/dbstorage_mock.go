// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/dbstorage.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/dbstorage.go -destination=internal/storage/mocks/dbstorage_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	repository "github.com/ole-larsen/plutonium/internal/storage/db/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockDBStorageInterface is a mock of DBStorageInterface interface.
type MockDBStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBStorageInterfaceMockRecorder
	isgomock struct{}
}

// MockDBStorageInterfaceMockRecorder is the mock recorder for MockDBStorageInterface.
type MockDBStorageInterfaceMockRecorder struct {
	mock *MockDBStorageInterface
}

// NewMockDBStorageInterface creates a new mock instance.
func NewMockDBStorageInterface(ctrl *gomock.Controller) *MockDBStorageInterface {
	mock := &MockDBStorageInterface{ctrl: ctrl}
	mock.recorder = &MockDBStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStorageInterface) EXPECT() *MockDBStorageInterfaceMockRecorder {
	return m.recorder
}

// ConnectCategoriesRepository mocks base method.
func (m *MockDBStorageInterface) ConnectCategoriesRepository(ctx context.Context, sqlxDB *sqlx.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectCategoriesRepository", ctx, sqlxDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectCategoriesRepository indicates an expected call of ConnectCategoriesRepository.
func (mr *MockDBStorageInterfaceMockRecorder) ConnectCategoriesRepository(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectCategoriesRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).ConnectCategoriesRepository), ctx, sqlxDB)
}

// ConnectContractsRepository mocks base method.
func (m *MockDBStorageInterface) ConnectContractsRepository(ctx context.Context, sqlxDB *sqlx.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectContractsRepository", ctx, sqlxDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectContractsRepository indicates an expected call of ConnectContractsRepository.
func (mr *MockDBStorageInterfaceMockRecorder) ConnectContractsRepository(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectContractsRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).ConnectContractsRepository), ctx, sqlxDB)
}

// ConnectFilesRepository mocks base method.
func (m *MockDBStorageInterface) ConnectFilesRepository(ctx context.Context, sqlxDB *sqlx.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectFilesRepository", ctx, sqlxDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectFilesRepository indicates an expected call of ConnectFilesRepository.
func (mr *MockDBStorageInterfaceMockRecorder) ConnectFilesRepository(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectFilesRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).ConnectFilesRepository), ctx, sqlxDB)
}

// ConnectMenusRepository mocks base method.
func (m *MockDBStorageInterface) ConnectMenusRepository(ctx context.Context, sqlxDB *sqlx.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectMenusRepository", ctx, sqlxDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectMenusRepository indicates an expected call of ConnectMenusRepository.
func (mr *MockDBStorageInterfaceMockRecorder) ConnectMenusRepository(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectMenusRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).ConnectMenusRepository), ctx, sqlxDB)
}

// ConnectPagesRepository mocks base method.
func (m *MockDBStorageInterface) ConnectPagesRepository(ctx context.Context, sqlxDB *sqlx.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectPagesRepository", ctx, sqlxDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectPagesRepository indicates an expected call of ConnectPagesRepository.
func (mr *MockDBStorageInterfaceMockRecorder) ConnectPagesRepository(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectPagesRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).ConnectPagesRepository), ctx, sqlxDB)
}

// ConnectSlidersRepository mocks base method.
func (m *MockDBStorageInterface) ConnectSlidersRepository(ctx context.Context, sqlxDB *sqlx.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectSlidersRepository", ctx, sqlxDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectSlidersRepository indicates an expected call of ConnectSlidersRepository.
func (mr *MockDBStorageInterfaceMockRecorder) ConnectSlidersRepository(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectSlidersRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).ConnectSlidersRepository), ctx, sqlxDB)
}

// ConnectUsersRepository mocks base method.
func (m *MockDBStorageInterface) ConnectUsersRepository(ctx context.Context, sqlxDB *sqlx.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectUsersRepository", ctx, sqlxDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectUsersRepository indicates an expected call of ConnectUsersRepository.
func (mr *MockDBStorageInterfaceMockRecorder) ConnectUsersRepository(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectUsersRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).ConnectUsersRepository), ctx, sqlxDB)
}

// GetCategoriesRepository mocks base method.
func (m *MockDBStorageInterface) GetCategoriesRepository() *repository.CategoriesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesRepository")
	ret0, _ := ret[0].(*repository.CategoriesRepository)
	return ret0
}

// GetCategoriesRepository indicates an expected call of GetCategoriesRepository.
func (mr *MockDBStorageInterfaceMockRecorder) GetCategoriesRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).GetCategoriesRepository))
}

// GetContractsRepository mocks base method.
func (m *MockDBStorageInterface) GetContractsRepository() *repository.ContractsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsRepository")
	ret0, _ := ret[0].(*repository.ContractsRepository)
	return ret0
}

// GetContractsRepository indicates an expected call of GetContractsRepository.
func (mr *MockDBStorageInterfaceMockRecorder) GetContractsRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).GetContractsRepository))
}

// GetFilesRepository mocks base method.
func (m *MockDBStorageInterface) GetFilesRepository() *repository.FilesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesRepository")
	ret0, _ := ret[0].(*repository.FilesRepository)
	return ret0
}

// GetFilesRepository indicates an expected call of GetFilesRepository.
func (mr *MockDBStorageInterfaceMockRecorder) GetFilesRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).GetFilesRepository))
}

// GetMenusRepository mocks base method.
func (m *MockDBStorageInterface) GetMenusRepository() *repository.MenusRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenusRepository")
	ret0, _ := ret[0].(*repository.MenusRepository)
	return ret0
}

// GetMenusRepository indicates an expected call of GetMenusRepository.
func (mr *MockDBStorageInterfaceMockRecorder) GetMenusRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenusRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).GetMenusRepository))
}

// GetSlidersRepository mocks base method.
func (m *MockDBStorageInterface) GetSlidersRepository() *repository.SlidersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlidersRepository")
	ret0, _ := ret[0].(*repository.SlidersRepository)
	return ret0
}

// GetSlidersRepository indicates an expected call of GetSlidersRepository.
func (mr *MockDBStorageInterfaceMockRecorder) GetSlidersRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlidersRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).GetSlidersRepository))
}

// GetUsersRepository mocks base method.
func (m *MockDBStorageInterface) GetUsersRepository() *repository.UsersRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersRepository")
	ret0, _ := ret[0].(*repository.UsersRepository)
	return ret0
}

// GetUsersRepository indicates an expected call of GetUsersRepository.
func (mr *MockDBStorageInterfaceMockRecorder) GetUsersRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersRepository", reflect.TypeOf((*MockDBStorageInterface)(nil).GetUsersRepository))
}

// Init mocks base method.
func (m *MockDBStorageInterface) Init(ctx context.Context, sqlxDB *sqlx.DB) (*sqlx.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, sqlxDB)
	ret0, _ := ret[0].(*sqlx.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockDBStorageInterfaceMockRecorder) Init(ctx, sqlxDB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDBStorageInterface)(nil).Init), ctx, sqlxDB)
}
