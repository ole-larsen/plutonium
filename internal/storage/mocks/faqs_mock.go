// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/faqs.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/faqs.go -destination=internal/storage/mocks/faqs_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFaqsRepositoryInterface is a mock of FaqsRepositoryInterface interface.
type MockFaqsRepositoryInterface struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockFaqsRepositoryInterfaceMockRecorder
}

// MockFaqsRepositoryInterfaceMockRecorder is the mock recorder for MockFaqsRepositoryInterface.
type MockFaqsRepositoryInterfaceMockRecorder struct {
	mock *MockFaqsRepositoryInterface
}

// NewMockFaqsRepositoryInterface creates a new mock instance.
func NewMockFaqsRepositoryInterface(ctrl *gomock.Controller) *MockFaqsRepositoryInterface {
	mock := &MockFaqsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockFaqsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFaqsRepositoryInterface) EXPECT() *MockFaqsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFaqsRepositoryInterface) Create(ctx context.Context, faqMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, faqMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFaqsRepositoryInterfaceMockRecorder) Create(ctx, faqMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFaqsRepositoryInterface)(nil).Create), ctx, faqMap)
}

// GetFaqByID mocks base method.
func (m *MockFaqsRepositoryInterface) GetFaqByID(ctx context.Context, id int64) (*models.Faq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaqByID", ctx, id)
	ret0, _ := ret[0].(*models.Faq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaqByID indicates an expected call of GetFaqByID.
func (mr *MockFaqsRepositoryInterfaceMockRecorder) GetFaqByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaqByID", reflect.TypeOf((*MockFaqsRepositoryInterface)(nil).GetFaqByID), ctx, id)
}

// GetFaqs mocks base method.
func (m *MockFaqsRepositoryInterface) GetFaqs(ctx context.Context) ([]*models.Faq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaqs", ctx)
	ret0, _ := ret[0].([]*models.Faq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaqs indicates an expected call of GetFaqs.
func (mr *MockFaqsRepositoryInterfaceMockRecorder) GetFaqs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaqs", reflect.TypeOf((*MockFaqsRepositoryInterface)(nil).GetFaqs), ctx)
}

// GetPublicFaqs mocks base method.
func (m *MockFaqsRepositoryInterface) GetPublicFaqs(ctx context.Context) ([]*models.PublicFaqItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicFaqs", ctx)
	ret0, _ := ret[0].([]*models.PublicFaqItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicFaqs indicates an expected call of GetPublicFaqs.
func (mr *MockFaqsRepositoryInterfaceMockRecorder) GetPublicFaqs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicFaqs", reflect.TypeOf((*MockFaqsRepositoryInterface)(nil).GetPublicFaqs), ctx)
}

// InnerDB mocks base method.
func (m *MockFaqsRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockFaqsRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockFaqsRepositoryInterface)(nil).InnerDB))
}

// Ping mocks base method.
func (m *MockFaqsRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockFaqsRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockFaqsRepositoryInterface)(nil).Ping))
}

// Update mocks base method.
func (m *MockFaqsRepositoryInterface) Update(ctx context.Context, faqMap map[string]any) ([]*models.Faq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, faqMap)
	ret0, _ := ret[0].([]*models.Faq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFaqsRepositoryInterfaceMockRecorder) Update(ctx, faqMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFaqsRepositoryInterface)(nil).Update), ctx, faqMap)
}
