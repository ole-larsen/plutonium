// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/files.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/files.go -destination=internal/storage/mocks/files_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFilesRepositoryInterface is a mock of FilesRepositoryInterface interface.
type MockFilesRepositoryInterface struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockFilesRepositoryInterfaceMockRecorder
}

// MockFilesRepositoryInterfaceMockRecorder is the mock recorder for MockFilesRepositoryInterface.
type MockFilesRepositoryInterfaceMockRecorder struct {
	mock *MockFilesRepositoryInterface
}

// NewMockFilesRepositoryInterface creates a new mock instance.
func NewMockFilesRepositoryInterface(ctrl *gomock.Controller) *MockFilesRepositoryInterface {
	mock := &MockFilesRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockFilesRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesRepositoryInterface) EXPECT() *MockFilesRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFilesRepositoryInterface) Create(ctx context.Context, fileMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, fileMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFilesRepositoryInterfaceMockRecorder) Create(ctx, fileMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).Create), ctx, fileMap)
}

// GetFileByID mocks base method.
func (m *MockFilesRepositoryInterface) GetFileByID(ctx context.Context, id int64) (*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByID", ctx, id)
	ret0, _ := ret[0].(*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByID indicates an expected call of GetFileByID.
func (mr *MockFilesRepositoryInterfaceMockRecorder) GetFileByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByID", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).GetFileByID), ctx, id)
}

// GetFileByName mocks base method.
func (m *MockFilesRepositoryInterface) GetFileByName(ctx context.Context, name string) (*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileByName", ctx, name)
	ret0, _ := ret[0].(*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileByName indicates an expected call of GetFileByName.
func (mr *MockFilesRepositoryInterfaceMockRecorder) GetFileByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileByName", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).GetFileByName), ctx, name)
}

// GetFiles mocks base method.
func (m *MockFilesRepositoryInterface) GetFiles(ctx context.Context) ([]*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx)
	ret0, _ := ret[0].([]*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockFilesRepositoryInterfaceMockRecorder) GetFiles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).GetFiles), ctx)
}

// GetPublicFileByID mocks base method.
func (m *MockFilesRepositoryInterface) GetPublicFileByID(ctx context.Context, id int64) (*models.PublicFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicFileByID", ctx, id)
	ret0, _ := ret[0].(*models.PublicFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicFileByID indicates an expected call of GetPublicFileByID.
func (mr *MockFilesRepositoryInterfaceMockRecorder) GetPublicFileByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicFileByID", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).GetPublicFileByID), ctx, id)
}

// GetPublicFileByName mocks base method.
func (m *MockFilesRepositoryInterface) GetPublicFileByName(ctx context.Context, name string) (*models.PublicFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicFileByName", ctx, name)
	ret0, _ := ret[0].(*models.PublicFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicFileByName indicates an expected call of GetPublicFileByName.
func (mr *MockFilesRepositoryInterfaceMockRecorder) GetPublicFileByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicFileByName", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).GetPublicFileByName), ctx, name)
}

// GetPublicFilesByProvider mocks base method.
func (m *MockFilesRepositoryInterface) GetPublicFilesByProvider(ctx context.Context, provider string) ([]*models.PublicFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicFilesByProvider", ctx, provider)
	ret0, _ := ret[0].([]*models.PublicFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicFilesByProvider indicates an expected call of GetPublicFilesByProvider.
func (mr *MockFilesRepositoryInterfaceMockRecorder) GetPublicFilesByProvider(ctx, provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicFilesByProvider", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).GetPublicFilesByProvider), ctx, provider)
}

// InnerDB mocks base method.
func (m *MockFilesRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockFilesRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).InnerDB))
}

// Ping mocks base method.
func (m *MockFilesRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockFilesRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).Ping))
}

// Update mocks base method.
func (m *MockFilesRepositoryInterface) Update(ctx context.Context, fileMap map[string]any) ([]*models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, fileMap)
	ret0, _ := ret[0].([]*models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFilesRepositoryInterfaceMockRecorder) Update(ctx, fileMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFilesRepositoryInterface)(nil).Update), ctx, fileMap)
}
