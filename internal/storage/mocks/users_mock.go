// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/users.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	repository "github.com/ole-larsen/plutonium/internal/storage/db/repository"
)

// MockUsersRepositoryInterface is a mock of UsersRepositoryInterface interface.
type MockUsersRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryInterfaceMockRecorder
}

// MockUsersRepositoryInterfaceMockRecorder is the mock recorder for MockUsersRepositoryInterface.
type MockUsersRepositoryInterfaceMockRecorder struct {
	mock *MockUsersRepositoryInterface
}

// NewMockUsersRepositoryInterface creates a new mock instance.
func NewMockUsersRepositoryInterface(ctrl *gomock.Controller) *MockUsersRepositoryInterface {
	mock := &MockUsersRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepositoryInterface) EXPECT() *MockUsersRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsersRepositoryInterface) Create(ctx context.Context, userMap map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepositoryInterfaceMockRecorder) Create(ctx, userMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepositoryInterface)(nil).Create), ctx, userMap)
}

// GetOne mocks base method.
func (m *MockUsersRepositoryInterface) GetOne(ctx context.Context, email string) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, email)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockUsersRepositoryInterfaceMockRecorder) GetOne(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockUsersRepositoryInterface)(nil).GetOne), ctx, email)
}

// InnerDB mocks base method.
func (m *MockUsersRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockUsersRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockUsersRepositoryInterface)(nil).InnerDB))
}

// MigrateContext mocks base method.
func (m *MockUsersRepositoryInterface) MigrateContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateContext indicates an expected call of MigrateContext.
func (mr *MockUsersRepositoryInterfaceMockRecorder) MigrateContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContext", reflect.TypeOf((*MockUsersRepositoryInterface)(nil).MigrateContext), ctx)
}

// Ping mocks base method.
func (m *MockUsersRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockUsersRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockUsersRepositoryInterface)(nil).Ping))
}
