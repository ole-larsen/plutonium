// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/contacts.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/contacts.go -destination=internal/storage/mocks/contacts_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockContactsRepositoryInterface is a mock of ContactsRepositoryInterface interface.
type MockContactsRepositoryInterface struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockContactsRepositoryInterfaceMockRecorder
}

// MockContactsRepositoryInterfaceMockRecorder is the mock recorder for MockContactsRepositoryInterface.
type MockContactsRepositoryInterfaceMockRecorder struct {
	mock *MockContactsRepositoryInterface
}

// NewMockContactsRepositoryInterface creates a new mock instance.
func NewMockContactsRepositoryInterface(ctrl *gomock.Controller) *MockContactsRepositoryInterface {
	mock := &MockContactsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockContactsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactsRepositoryInterface) EXPECT() *MockContactsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContactsRepositoryInterface) Create(ctx context.Context, contactMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, contactMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockContactsRepositoryInterfaceMockRecorder) Create(ctx, contactMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContactsRepositoryInterface)(nil).Create), ctx, contactMap)
}

// GetContactByID mocks base method.
func (m *MockContactsRepositoryInterface) GetContactByID(ctx context.Context, id int64) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByID", ctx, id)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByID indicates an expected call of GetContactByID.
func (mr *MockContactsRepositoryInterfaceMockRecorder) GetContactByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByID", reflect.TypeOf((*MockContactsRepositoryInterface)(nil).GetContactByID), ctx, id)
}

// GetContactByPageID mocks base method.
func (m *MockContactsRepositoryInterface) GetContactByPageID(ctx context.Context, pageID int64) (*models.PublicContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactByPageID", ctx, pageID)
	ret0, _ := ret[0].(*models.PublicContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactByPageID indicates an expected call of GetContactByPageID.
func (mr *MockContactsRepositoryInterfaceMockRecorder) GetContactByPageID(ctx, pageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactByPageID", reflect.TypeOf((*MockContactsRepositoryInterface)(nil).GetContactByPageID), ctx, pageID)
}

// GetContacts mocks base method.
func (m *MockContactsRepositoryInterface) GetContacts(ctx context.Context) ([]*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", ctx)
	ret0, _ := ret[0].([]*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockContactsRepositoryInterfaceMockRecorder) GetContacts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockContactsRepositoryInterface)(nil).GetContacts), ctx)
}

// InnerDB mocks base method.
func (m *MockContactsRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockContactsRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockContactsRepositoryInterface)(nil).InnerDB))
}

// Ping mocks base method.
func (m *MockContactsRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockContactsRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockContactsRepositoryInterface)(nil).Ping))
}

// Update mocks base method.
func (m *MockContactsRepositoryInterface) Update(ctx context.Context, contactMap map[string]any) ([]*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, contactMap)
	ret0, _ := ret[0].([]*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockContactsRepositoryInterfaceMockRecorder) Update(ctx, contactMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContactsRepositoryInterface)(nil).Update), ctx, contactMap)
}
