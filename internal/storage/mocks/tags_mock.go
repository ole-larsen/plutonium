// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/tags.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/tags.go -destination=internal/storage/mocks/tags_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTagsRepositoryInterface is a mock of TagsRepositoryInterface interface.
type MockTagsRepositoryInterface struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockTagsRepositoryInterfaceMockRecorder
}

// MockTagsRepositoryInterfaceMockRecorder is the mock recorder for MockTagsRepositoryInterface.
type MockTagsRepositoryInterfaceMockRecorder struct {
	mock *MockTagsRepositoryInterface
}

// NewMockTagsRepositoryInterface creates a new mock instance.
func NewMockTagsRepositoryInterface(ctrl *gomock.Controller) *MockTagsRepositoryInterface {
	mock := &MockTagsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTagsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagsRepositoryInterface) EXPECT() *MockTagsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTagsRepositoryInterface) Create(ctx context.Context, tagMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tagMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTagsRepositoryInterfaceMockRecorder) Create(ctx, tagMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagsRepositoryInterface)(nil).Create), ctx, tagMap)
}

// GetTagByID mocks base method.
func (m *MockTagsRepositoryInterface) GetTagByID(ctx context.Context, id int64) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByID", ctx, id)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByID indicates an expected call of GetTagByID.
func (mr *MockTagsRepositoryInterfaceMockRecorder) GetTagByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByID", reflect.TypeOf((*MockTagsRepositoryInterface)(nil).GetTagByID), ctx, id)
}

// GetTags mocks base method.
func (m *MockTagsRepositoryInterface) GetTags(ctx context.Context) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", ctx)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockTagsRepositoryInterfaceMockRecorder) GetTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockTagsRepositoryInterface)(nil).GetTags), ctx)
}

// InnerDB mocks base method.
func (m *MockTagsRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockTagsRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockTagsRepositoryInterface)(nil).InnerDB))
}

// Ping mocks base method.
func (m *MockTagsRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockTagsRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockTagsRepositoryInterface)(nil).Ping))
}

// Update mocks base method.
func (m *MockTagsRepositoryInterface) Update(ctx context.Context, tagMap map[string]any) ([]*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tagMap)
	ret0, _ := ret[0].([]*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTagsRepositoryInterfaceMockRecorder) Update(ctx, tagMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTagsRepositoryInterface)(nil).Update), ctx, tagMap)
}
