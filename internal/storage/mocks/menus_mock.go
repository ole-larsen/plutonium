// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/menus.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/menus.go -destination=internal/storage/mocks/menus_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMenusRepositoryInterface is a mock of MenusRepositoryInterface interface.
type MockMenusRepositoryInterface struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockMenusRepositoryInterfaceMockRecorder
}

// MockMenusRepositoryInterfaceMockRecorder is the mock recorder for MockMenusRepositoryInterface.
type MockMenusRepositoryInterfaceMockRecorder struct {
	mock *MockMenusRepositoryInterface
}

// NewMockMenusRepositoryInterface creates a new mock instance.
func NewMockMenusRepositoryInterface(ctrl *gomock.Controller) *MockMenusRepositoryInterface {
	mock := &MockMenusRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMenusRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenusRepositoryInterface) EXPECT() *MockMenusRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetMenuByProvider mocks base method.
func (m *MockMenusRepositoryInterface) GetMenuByProvider(provider string) (*models.PublicMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuByProvider", provider)
	ret0, _ := ret[0].(*models.PublicMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuByProvider indicates an expected call of GetMenuByProvider.
func (mr *MockMenusRepositoryInterfaceMockRecorder) GetMenuByProvider(provider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuByProvider", reflect.TypeOf((*MockMenusRepositoryInterface)(nil).GetMenuByProvider), provider)
}

// InnerDB mocks base method.
func (m *MockMenusRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockMenusRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockMenusRepositoryInterface)(nil).InnerDB))
}

// Ping mocks base method.
func (m *MockMenusRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMenusRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMenusRepositoryInterface)(nil).Ping))
}
