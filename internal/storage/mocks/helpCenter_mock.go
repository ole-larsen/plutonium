// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/helpCenter.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/helpCenter.go -destination=internal/storage/mocks/helpCenter_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockHelpCenterRepositoryInterface is a mock of HelpCenterRepositoryInterface interface.
type MockHelpCenterRepositoryInterface struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockHelpCenterRepositoryInterfaceMockRecorder
}

// MockHelpCenterRepositoryInterfaceMockRecorder is the mock recorder for MockHelpCenterRepositoryInterface.
type MockHelpCenterRepositoryInterfaceMockRecorder struct {
	mock *MockHelpCenterRepositoryInterface
}

// NewMockHelpCenterRepositoryInterface creates a new mock instance.
func NewMockHelpCenterRepositoryInterface(ctrl *gomock.Controller) *MockHelpCenterRepositoryInterface {
	mock := &MockHelpCenterRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockHelpCenterRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelpCenterRepositoryInterface) EXPECT() *MockHelpCenterRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHelpCenterRepositoryInterface) Create(ctx context.Context, helpCenterMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, helpCenterMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHelpCenterRepositoryInterfaceMockRecorder) Create(ctx, helpCenterMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHelpCenterRepositoryInterface)(nil).Create), ctx, helpCenterMap)
}

// GetHelpCenter mocks base method.
func (m *MockHelpCenterRepositoryInterface) GetHelpCenter(ctx context.Context) ([]*models.HelpCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpCenter", ctx)
	ret0, _ := ret[0].([]*models.HelpCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpCenter indicates an expected call of GetHelpCenter.
func (mr *MockHelpCenterRepositoryInterfaceMockRecorder) GetHelpCenter(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpCenter", reflect.TypeOf((*MockHelpCenterRepositoryInterface)(nil).GetHelpCenter), ctx)
}

// GetHelpCenterByID mocks base method.
func (m *MockHelpCenterRepositoryInterface) GetHelpCenterByID(ctx context.Context, id int64) (*models.HelpCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelpCenterByID", ctx, id)
	ret0, _ := ret[0].(*models.HelpCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHelpCenterByID indicates an expected call of GetHelpCenterByID.
func (mr *MockHelpCenterRepositoryInterfaceMockRecorder) GetHelpCenterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelpCenterByID", reflect.TypeOf((*MockHelpCenterRepositoryInterface)(nil).GetHelpCenterByID), ctx, id)
}

// GetPublicHelpCenter mocks base method.
func (m *MockHelpCenterRepositoryInterface) GetPublicHelpCenter(ctx context.Context) ([]*models.PublicHelpCenterItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicHelpCenter", ctx)
	ret0, _ := ret[0].([]*models.PublicHelpCenterItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicHelpCenter indicates an expected call of GetPublicHelpCenter.
func (mr *MockHelpCenterRepositoryInterfaceMockRecorder) GetPublicHelpCenter(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicHelpCenter", reflect.TypeOf((*MockHelpCenterRepositoryInterface)(nil).GetPublicHelpCenter), ctx)
}

// InnerDB mocks base method.
func (m *MockHelpCenterRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockHelpCenterRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockHelpCenterRepositoryInterface)(nil).InnerDB))
}

// Ping mocks base method.
func (m *MockHelpCenterRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockHelpCenterRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHelpCenterRepositoryInterface)(nil).Ping))
}

// Update mocks base method.
func (m *MockHelpCenterRepositoryInterface) Update(ctx context.Context, helpCenterMap map[string]any) ([]*models.HelpCenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, helpCenterMap)
	ret0, _ := ret[0].([]*models.HelpCenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockHelpCenterRepositoryInterfaceMockRecorder) Update(ctx, helpCenterMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHelpCenterRepositoryInterface)(nil).Update), ctx, helpCenterMap)
}
