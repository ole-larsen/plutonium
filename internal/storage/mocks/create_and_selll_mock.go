// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/create_and_sell.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/create_and_sell.go -destination=internal/storage/mocks/create_and_selll_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateAndSellRepositoryInterface is a mock of CreateAndSellRepositoryInterface interface.
type MockCreateAndSellRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAndSellRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockCreateAndSellRepositoryInterfaceMockRecorder is the mock recorder for MockCreateAndSellRepositoryInterface.
type MockCreateAndSellRepositoryInterfaceMockRecorder struct {
	mock *MockCreateAndSellRepositoryInterface
}

// NewMockCreateAndSellRepositoryInterface creates a new mock instance.
func NewMockCreateAndSellRepositoryInterface(ctrl *gomock.Controller) *MockCreateAndSellRepositoryInterface {
	mock := &MockCreateAndSellRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCreateAndSellRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAndSellRepositoryInterface) EXPECT() *MockCreateAndSellRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCreateAndSellRepositoryInterface) Create(ctx context.Context, createAndSellMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, createAndSellMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCreateAndSellRepositoryInterfaceMockRecorder) Create(ctx, createAndSellMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateAndSellRepositoryInterface)(nil).Create), ctx, createAndSellMap)
}

// GetCreateAndSell mocks base method.
func (m *MockCreateAndSellRepositoryInterface) GetCreateAndSell(ctx context.Context) ([]*models.CreateAndSell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateAndSell", ctx)
	ret0, _ := ret[0].([]*models.CreateAndSell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreateAndSell indicates an expected call of GetCreateAndSell.
func (mr *MockCreateAndSellRepositoryInterfaceMockRecorder) GetCreateAndSell(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateAndSell", reflect.TypeOf((*MockCreateAndSellRepositoryInterface)(nil).GetCreateAndSell), ctx)
}

// GetCreateAndSellByID mocks base method.
func (m *MockCreateAndSellRepositoryInterface) GetCreateAndSellByID(ctx context.Context, id int64) (*models.CreateAndSell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreateAndSellByID", ctx, id)
	ret0, _ := ret[0].(*models.CreateAndSell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreateAndSellByID indicates an expected call of GetCreateAndSellByID.
func (mr *MockCreateAndSellRepositoryInterfaceMockRecorder) GetCreateAndSellByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreateAndSellByID", reflect.TypeOf((*MockCreateAndSellRepositoryInterface)(nil).GetCreateAndSellByID), ctx, id)
}

// GetPublicCreateAndSell mocks base method.
func (m *MockCreateAndSellRepositoryInterface) GetPublicCreateAndSell(ctx context.Context) ([]*models.PublicCreateAndSellItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicCreateAndSell", ctx)
	ret0, _ := ret[0].([]*models.PublicCreateAndSellItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicCreateAndSell indicates an expected call of GetPublicCreateAndSell.
func (mr *MockCreateAndSellRepositoryInterfaceMockRecorder) GetPublicCreateAndSell(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicCreateAndSell", reflect.TypeOf((*MockCreateAndSellRepositoryInterface)(nil).GetPublicCreateAndSell), ctx)
}

// InnerDB mocks base method.
func (m *MockCreateAndSellRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockCreateAndSellRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockCreateAndSellRepositoryInterface)(nil).InnerDB))
}

// Ping mocks base method.
func (m *MockCreateAndSellRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCreateAndSellRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCreateAndSellRepositoryInterface)(nil).Ping))
}

// Update mocks base method.
func (m *MockCreateAndSellRepositoryInterface) Update(ctx context.Context, createAndSellMap map[string]any) ([]*models.CreateAndSell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, createAndSellMap)
	ret0, _ := ret[0].([]*models.CreateAndSell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCreateAndSellRepositoryInterfaceMockRecorder) Update(ctx, createAndSellMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCreateAndSellRepositoryInterface)(nil).Update), ctx, createAndSellMap)
}
