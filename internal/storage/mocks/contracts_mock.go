// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/db/repository/contracts.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/db/repository/contracts.go -destination=internal/storage/mocks/contracts_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	sqlx "github.com/jmoiron/sqlx"
	models "github.com/ole-larsen/plutonium/models"
	gomock "go.uber.org/mock/gomock"
)

// MockContractsRepositoryInterface is a mock of ContractsRepositoryInterface interface.
type MockContractsRepositoryInterface struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockContractsRepositoryInterfaceMockRecorder
}

// MockContractsRepositoryInterfaceMockRecorder is the mock recorder for MockContractsRepositoryInterface.
type MockContractsRepositoryInterfaceMockRecorder struct {
	mock *MockContractsRepositoryInterface
}

// NewMockContractsRepositoryInterface creates a new mock instance.
func NewMockContractsRepositoryInterface(ctrl *gomock.Controller) *MockContractsRepositoryInterface {
	mock := &MockContractsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockContractsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractsRepositoryInterface) EXPECT() *MockContractsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContractsRepositoryInterface) Create(ctx context.Context, contractMap map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, contractMap)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockContractsRepositoryInterfaceMockRecorder) Create(ctx, contractMap any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).Create), ctx, contractMap)
}

// GetAuctions mocks base method.
func (m *MockContractsRepositoryInterface) GetAuctions(ctx context.Context) ([]*models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuctions", ctx)
	ret0, _ := ret[0].([]*models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuctions indicates an expected call of GetAuctions.
func (mr *MockContractsRepositoryInterfaceMockRecorder) GetAuctions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuctions", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).GetAuctions), ctx)
}

// GetByAddress mocks base method.
func (m *MockContractsRepositoryInterface) GetByAddress(ctx context.Context, address common.Address) (*models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", ctx, address)
	ret0, _ := ret[0].(*models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress.
func (mr *MockContractsRepositoryInterfaceMockRecorder) GetByAddress(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).GetByAddress), ctx, address)
}

// GetCollectionsContracts mocks base method.
func (m *MockContractsRepositoryInterface) GetCollectionsContracts(ctx context.Context) ([]*models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionsContracts", ctx)
	ret0, _ := ret[0].([]*models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionsContracts indicates an expected call of GetCollectionsContracts.
func (mr *MockContractsRepositoryInterfaceMockRecorder) GetCollectionsContracts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsContracts", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).GetCollectionsContracts), ctx)
}

// GetOne mocks base method.
func (m *MockContractsRepositoryInterface) GetOne(ctx context.Context, name string) (*models.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, name)
	ret0, _ := ret[0].(*models.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockContractsRepositoryInterfaceMockRecorder) GetOne(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).GetOne), ctx, name)
}

// InnerDB mocks base method.
func (m *MockContractsRepositoryInterface) InnerDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InnerDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// InnerDB indicates an expected call of InnerDB.
func (mr *MockContractsRepositoryInterfaceMockRecorder) InnerDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerDB", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).InnerDB))
}

// MigrateContext mocks base method.
func (m *MockContractsRepositoryInterface) MigrateContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateContext indicates an expected call of MigrateContext.
func (mr *MockContractsRepositoryInterfaceMockRecorder) MigrateContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContext", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).MigrateContext), ctx)
}

// Ping mocks base method.
func (m *MockContractsRepositoryInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockContractsRepositoryInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockContractsRepositoryInterface)(nil).Ping))
}
