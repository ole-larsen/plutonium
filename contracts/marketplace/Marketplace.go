// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package marketplace

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MarketplaceCollectible is an auto generated low-level Go binding around an user-defined struct.
type MarketplaceCollectible struct {
	Id           *big.Int
	CollectionId *big.Int
	TokenIds     []*big.Int
	Owners       []common.Address
	Creator      common.Address
	IsAuction    bool
	Price        *big.Int
	Fulfilled    []bool
	IsLocked     bool
}

// MarketplaceCollection is an auto generated low-level Go binding around an user-defined struct.
type MarketplaceCollection struct {
	Name          string
	Symbol        string
	Description   string
	NftCollection common.Address
	Fee           *big.Int
	Owner         common.Address
	Creator       common.Address
	IsApproved    bool
	IsLocked      bool
	MaxItems      *big.Int
}

// MarketplaceMetaData contains all meta data concerning the Marketplace contract.
var MarketplaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"addresspayable[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CreateCollectible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxItems\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectibleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditCollectible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxItems\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"EditCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectibleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createCollectible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxItemsInCollection\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectibleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isAuction\",\"type\":\"bool\"}],\"name\":\"editCollectible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxItemsInCollection\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"editCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectibleId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectibleId\",\"type\":\"uint256\"}],\"name\":\"getCollectible\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"addresspayable[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"fulfilled\",\"type\":\"bool[]\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"internalType\":\"structMarketplace.Collectible\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"getCollectibleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"getCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"contractNFTCollection\",\"name\":\"nftCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxItems\",\"type\":\"uint256\"}],\"internalType\":\"structMarketplace.Collection\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectionCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getCollectionIdByName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectibleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collectibleId\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a060405234801561001057600080fd5b5060405161513038038061513083398181016040528101906100329190610237565b6001600081905550816001908161004991906104aa565b50806002819055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505061057c565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100f3826100aa565b810181811067ffffffffffffffff82111715610112576101116100bb565b5b80604052505050565b600061012561008c565b905061013182826100ea565b919050565b600067ffffffffffffffff821115610151576101506100bb565b5b61015a826100aa565b9050602081019050919050565b60005b8381101561018557808201518184015260208101905061016a565b60008484015250505050565b60006101a461019f84610136565b61011b565b9050828152602081018484840111156101c0576101bf6100a5565b5b6101cb848285610167565b509392505050565b600082601f8301126101e8576101e76100a0565b5b81516101f8848260208601610191565b91505092915050565b6000819050919050565b61021481610201565b811461021f57600080fd5b50565b6000815190506102318161020b565b92915050565b6000806040838503121561024e5761024d610096565b5b600083015167ffffffffffffffff81111561026c5761026b61009b565b5b610278858286016101d3565b925050602061028985828601610222565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102e557607f821691505b6020821081036102f8576102f761029e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610323565b61036a8683610323565b95508019841693508086168417925050509392505050565b6000819050919050565b60006103a76103a261039d84610201565b610382565b610201565b9050919050565b6000819050919050565b6103c18361038c565b6103d56103cd826103ae565b848454610330565b825550505050565b600090565b6103ea6103dd565b6103f58184846103b8565b505050565b5b818110156104195761040e6000826103e2565b6001810190506103fb565b5050565b601f82111561045e5761042f816102fe565b61043884610313565b81016020851015610447578190505b61045b61045385610313565b8301826103fa565b50505b505050565b600082821c905092915050565b600061048160001984600802610463565b1980831691505092915050565b600061049a8383610470565b9150826002028217905092915050565b6104b382610293565b67ffffffffffffffff8111156104cc576104cb6100bb565b5b6104d682546102cd565b6104e182828561041d565b600060209050601f8311600181146105145760008415610502578287015190505b61050c858261048e565b865550610574565b601f198416610522866102fe565b60005b8281101561054a57848901518255600182019150602085019450602081019050610525565b868310156105675784890151610563601f891682610470565b8355505b6001600288020188555050505b505050505050565b608051614b6f6105c1600039600081816110e401528181611353015281816115440152818161194101528181611a05015281816120fa01526126c40152614b6f6000f3fe6080604052600436106101235760003560e01c80638740cd4e116100a05780639d25841b116100645780639d25841b146103d9578063ac30777314610416578063c47f002714610420578063ced72f8714610449578063d3c9727c1461047457610124565b80638740cd4e146102f6578063893d20e8146103335780638ec162aa1461035e5780638fdffd3c14610387578063953ff535146103b057610124565b80634be69a1a116100e75780634be69a1a146101ff5780634fee13fc1461023c5780635a1f3c281461026557806369fe0e2d146102a2578063835b83aa146102cb57610124565b806317d7de7c1461012957806327766e751461015457806340993b261461017d578063431e8d631461019957806347afe437146101d657610124565b5b600080fd5b34801561013557600080fd5b5061013e610490565b60405161014b9190612fe6565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906131d2565b610522565b005b61019760048036038101906101929190613255565b610be5565b005b3480156101a557600080fd5b506101c060048036038101906101bb919061335d565b611214565b6040516101cd91906133b5565b60405180910390f35b3480156101e257600080fd5b506101fd60048036038101906101f891906133d0565b611249565b005b34801561020b57600080fd5b5061022660048036038101906102219190613410565b611403565b60405161023391906133b5565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e91906133d0565b61143a565b005b34801561027157600080fd5b5061028c60048036038101906102879190613410565b6115f4565b604051610299919061362d565b60405180910390f35b3480156102ae57600080fd5b506102c960048036038101906102c49190613410565b61193f565b005b3480156102d757600080fd5b506102e06119ae565b6040516102ed91906133b5565b60405180910390f35b34801561030257600080fd5b5061031d6004803603810190610318919061368d565b6119b8565b60405161032a91906133b5565b60405180910390f35b34801561033f57600080fd5b50610348611a01565b60405161035591906136c9565b60405180910390f35b34801561036a57600080fd5b5061038560048036038101906103809190613710565b611a29565b005b34801561039357600080fd5b506103ae60048036038101906103a99190613843565b611d17565b005b3480156103bc57600080fd5b506103d760048036038101906103d29190613939565b61205b565b005b3480156103e557600080fd5b5061040060048036038101906103fb91906133d0565b61228d565b60405161040d9190613c94565b60405180910390f35b61041e612521565b005b34801561042c57600080fd5b506104476004803603810190610442919061335d565b6126c2565b005b34801561045557600080fd5b5061045e61273b565b60405161046b91906133b5565b60405180910390f35b61048e60048036038101906104899190613255565b612745565b005b60606001805461049f90613ce5565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb90613ce5565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b5050505050905090565b61052a612bad565b838360008111801561053e57506003548111155b61054757600080fd5b600082511161055557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361058e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16036105c757600080fd5b60006006600087815260200190815260200160002090508651816007015410156105f057600080fd5b8060060160149054906101000a900460ff1661060b57600080fd5b8060060160159054906101000a900460ff161561062757600080fd5b6000875167ffffffffffffffff81111561064457610643613021565b5b6040519080825280602002602001820160405280156106725781602001602082028036833780820191505090505b5090506000885167ffffffffffffffff81111561069257610691613021565b5b6040519080825280602002602001820160405280156106c05781602001602082028036833780820191505090505b50905060005b8951811015610998578360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3308c848151811061072357610722613d16565b5b60200260200101516040518363ffffffff1660e01b8152600401610748929190613d45565b600060405180830381600087803b15801561076257600080fd5b505af1158015610776573d6000803e3d6000fd5b505050508360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d85815181106107cf576107ce613d16565b5b60200260200101516040518463ffffffff1660e01b81526004016107f593929190613d6e565b600060405180830381600087803b15801561080f57600080fd5b505af1158015610823573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168460030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e8c848151811061089157610890613d16565b5b60200260200101516040518263ffffffff1660e01b81526004016108b591906133b5565b602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190613dba565b73ffffffffffffffffffffffffffffffffffffffff161461091657600080fd5b600083828151811061092b5761092a613d16565b5b6020026020010190151590811515815250503382828151811061095157610950613d16565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506106c6565b506009600089815260200190815260200160002060008154809291906109bd90613e16565b9190505550604051806101200160405280600960008b81526020019081526020016000205481526020018981526020018a81526020018281526020013373ffffffffffffffffffffffffffffffffffffffff168152602001881515815260200187815260200183815260200160001515815250600860008a81526020019081526020016000206000600960008c815260200190815260200160002054815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190610a97929190612cbd565b506060820151816003019080519060200190610ab4929190612d0a565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c0820151816005015560e0820151816006019080519060200190610b42929190612d94565b506101008201518160070160006101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff167f90ee92f99f21443735ecc68007318c34c52aa3e851f4fc29ddaa3f2254d83b1e600960008b8152602001908152602001600020548a8c858c8c604051610bca96959493929190613f4b565b60405180910390a25050505050610bdf612bfc565b50505050565b610bed612bad565b8282600082118015610c0157506003548211155b610c0a57600080fd5b600081118015610c2d575060096000838152602001908152602001600020548111155b610c3657600080fd5b600060066000878152602001908152602001600020905060006008600088815260200190815260200160002060008781526020019081526020016000209050600085118015610c8c575080600201805490508511155b610c9557600080fd5b85816000015414610ca557600080fd5b8060040160149054906101000a900460ff1615610cc157600080fd5b8060070160009054906101000a900460ff1615610cdd57600080fd5b6000610d27670de0b6b3a7640000610d196064610d0b87600401548760050154612c0690919063ffffffff16565b612c1c90919063ffffffff16565b612c1c90919063ffffffff16565b90506000610d42828460050154612c3290919063ffffffff16565b9050610d578782612c0690919063ffffffff16565b3414610d6257600080fd5b86610de384600601805480602002602001604051908101604052809291908181526020018280548015610dd957602002820191906000526020600020906000905b82829054906101000a900460ff16151581526020019060010190602082600001049283019260010382029150808411610da35790505b5050505050612c48565b1015610dee57600080fd5b600087905060005b84600201805490508110156110da57846006018181548110610e1b57610e1a613d16565b5b90600052602060002090602091828204019190069054906101000a900460ff16158015610eb457503373ffffffffffffffffffffffffffffffffffffffff16856003018281548110610e7057610e6f613d16565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156110cd5760008211156110cc57610ed58484612ca790919063ffffffff16565b60046000876003018481548110610eef57610eee613d16565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f639190613fba565b925050819055506001856006018281548110610f8257610f81613d16565b5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055508560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd303388600201858154811061100357611002613d16565b5b90600052602060002001546040518463ffffffff1660e01b815260040161102c93929190613d6e565b600060405180830381600087803b15801561104657600080fd5b505af115801561105a573d6000803e3d6000fd5b505050503385600301828154811061107557611074613d16565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081806110c890613fee565b9250505b5b8080600101915050610df6565b50878114611160577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc61112f8a86612c0690919063ffffffff16565b9081150290604051600060405180830381858888f1935050505015801561115a573d6000803e3d6000fd5b5061119b565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119290614063565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f91527f0b12cc8ffc1cb4c6d5df9e2d58087a96596ad766c47a62594f47a41dad856000015486600101548760020188600501548d6040516111f8959493929190614159565b60405180910390a25050505050505061120f612bfc565b505050565b60008082510361122357600080fd5b60058260405161123391906141ef565b9081526020016040518091039020549050919050565b818160008211801561125d57506003548211155b61126657600080fd5b600081118015611289575060096000838152602001908152602001600020548111155b61129257600080fd5b6000600860008681526020019081526020016000206000858152602001908152602001600020905083816000015414611300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f790614252565b60405180910390fd5b8060040160149054906101000a900460ff16611351576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611348906142e4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d690614376565b60405180910390fd5b60008160040160146101000a81548160ff0219169083151502179055505050505050565b6000808211801561141657506003548211155b61141f57600080fd5b60096000838152602001908152602001600020549050919050565b818160008211801561144e57506003548211155b61145757600080fd5b60008111801561147a575060096000838152602001908152602001600020548111155b61148357600080fd5b60006008600086815260200190815260200160002060008581526020019081526020016000209050838160000154146114f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e890614252565b60405180910390fd5b8060040160149054906101000a900460ff16611542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153990614408565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c79061449a565b60405180910390fd5b60018160040160146101000a81548160ff0219169083151502179055505050505050565b6115fc612e3a565b60008211801561160e57506003548211155b61161757600080fd5b600660008381526020019081526020016000206040518061014001604052908160008201805461164690613ce5565b80601f016020809104026020016040519081016040528092919081815260200182805461167290613ce5565b80156116bf5780601f10611694576101008083540402835291602001916116bf565b820191906000526020600020905b8154815290600101906020018083116116a257829003601f168201915b505050505081526020016001820180546116d890613ce5565b80601f016020809104026020016040519081016040528092919081815260200182805461170490613ce5565b80156117515780601f1061172657610100808354040283529160200191611751565b820191906000526020600020905b81548152906001019060200180831161173457829003601f168201915b5050505050815260200160028201805461176a90613ce5565b80601f016020809104026020016040519081016040528092919081815260200182805461179690613ce5565b80156117e35780601f106117b8576101008083540402835291602001916117e3565b820191906000526020600020905b8154815290600101906020018083116117c657829003601f168201915b505050505081526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820160149054906101000a900460ff161515151581526020016006820160159054906101000a900460ff161515151581526020016007820154815250509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461199757600080fd5b600081116119a457600080fd5b8060028190555050565b6000600354905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b611a31612bad565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a6957600080fd5b6000600660008c815260200190815260200160002090506000816000018054611a9190613ce5565b905003611a9d57600080fd5b8060070154861015611aae57600080fd5b8951816000018054611abf90613ce5565b9050141580611aed5750898051906020012081600001604051611ae2919061455d565b604051809103902014155b15611b3057600060058b604051611b0491906141ef565b90815260200160405180910390205411611b1d57600080fd5b89816000019081611b2e9190614716565b505b8851816001018054611b4190613ce5565b9050141580611b6f5750888051906020012081600101604051611b64919061455d565b604051809103902014155b15611b875788816001019081611b859190614716565b505b8751816002018054611b9890613ce5565b9050141580611bc65750878051906020012081600201604051611bbb919061455d565b604051809103902014155b15611bde5787816002019081611bdc9190614716565b505b86816004015414611bf3578681600401819055505b8215158160060160149054906101000a900460ff16151514611c2c57828160060160146101000a81548160ff0219169083151502179055505b8115158160060160159054906101000a900460ff16151514611c6557818160060160156101000a81548160ff0219169083151502179055505b85816007015414611c7a578581600701819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f7bab18a3dc1feb101f1f7ee8fc6ef12c98ab8c729af16c4b2505f80e2ffa31148e8e8e8d8d8b8b604051611cfa97969594939291906147e8565b60405180910390a450611d0b612bfc565b50505050505050505050565b611d1f612bad565b6000875103611d2d57600080fd5b6000865103611d3b57600080fd5b6000600588604051611d4d91906141ef565b90815260200160405180910390205414611d6657600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611dbd57600080fd5b60008311611dca57600080fd5b60036000815480929190611ddd90613e16565b91905055506000600660006003548152602001908152602001600020905087816000019081611e0c9190614716565b5086816001019081611e1e9190614716565b5085816002019081611e309190614716565b50828160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160040181905550818160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550338160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160060160146101000a81548160ff02191690831515021790555060008160060160156101000a81548160ff021916908315150217905550838160070181905550600354600589604051611f5991906141ef565b9081526020016040518091039020819055506001600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fa7217fa6d312670524ba494cd4fe4649ba95a72936b4c34f1d3c9eceaee019226003548c8c8b8b604051612041959493929190614865565b60405180910390a450612052612bfc565b50505050505050565b848460008211801561206f57506003548211155b61207857600080fd5b60008111801561209b575060096000838152602001908152602001600020548111155b6120a457600080fd5b60006008600089815260200190815260200160002060008881526020019081526020016000209050868160000154146120dc57600080fd5b8060040160149054906101000a900460ff16156120f857600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461215057600080fd5b60005b81600201805490508110156121af5781600601818154811061217857612177613d16565b5b90600052602060002090602091828204019190069054906101000a900460ff16156121a257600080fd5b8080600101915050612153565b50600086116121bd57600080fd5b806005015486146121d2578581600501819055505b8060070160009054906101000a900460ff1615158515151461220b57848160070160006101000a81548160ff0219169083151502179055505b8060040160149054906101000a900460ff1615158415151461224457838160040160146101000a81548160ff0219169083151502179055505b7fdb5b6a14075ccd1caa16a0ffe9eb0684c26975464ac963c47f77a9fc4f2ba173888887873360405161227b9594939291906148c6565b60405180910390a15050505050505050565b612295612ed3565b6000831180156122a757506003548311155b6122b057600080fd5b6000821180156122d3575060096000848152602001908152602001600020548211155b6122dc57600080fd5b6008600084815260200190815260200160002060008381526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820180548060200260200160405190810160405280929190818152602001828054801561236f57602002820191906000526020600020905b81548152602001906001019080831161235b575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156123fd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116123b3575b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682018054806020026020016040519081016040528092919081815260200182805480156124f557602002820191906000526020600020906000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116124bf5790505b505050505081526020016007820160009054906101000a900460ff161515151581525050905092915050565b612529612bad565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161257557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156125fa573d6000803e3d6000fd5b507f4f0554190111f93f8c2ccef2cc41473f187d7f29ff5a5c308ca41f9dfe4e989a33600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460405161266b929190613d45565b60405180910390a16000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126c0612bfc565b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461271a57600080fd5b600081510361272857600080fd5b80600190816127379190614716565b5050565b6000600254905090565b61274d612bad565b828260008211801561276157506003548211155b61276a57600080fd5b60008111801561278d575060096000838152602001908152602001600020548111155b61279657600080fd5b600060066000878152602001908152602001600020905060006008600088815260200190815260200160002060008781526020019081526020016000209050858160000154146127e557600080fd5b6000851180156127fc575080600201805490508511155b61280557600080fd5b8060040160149054906101000a900460ff161561282157600080fd5b8060070160009054906101000a900460ff161561283d57600080fd5b846128be826006018054806020026020016040519081016040528092919081815260200182805480156128b457602002820191906000526020600020906000905b82829054906101000a900460ff1615158152602001906001019060208260000104928301926001038202915080841161287e5790505b5050505050612c48565b82600601805490506128d09190614919565b10156128db57600080fd5b600085905060005b8260020180549050811015612abe5782600601818154811061290857612907613d16565b5b90600052602060002090602091828204019190069054906101000a900460ff16801561299f57503373ffffffffffffffffffffffffffffffffffffffff1683600301828154811061295c5761295b613d16565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b15612ab1576000821115612ab05760008360060182815481106129c5576129c4613d16565b5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055508360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866002018581548110612a4657612a45613d16565b5b90600052602060002001546040518463ffffffff1660e01b8152600401612a6f93929190613d6e565b600060405180830381600087803b158015612a8957600080fd5b505af1158015612a9d573d6000803e3d6000fd5b505050508180612aac90613fee565b9250505b5b80806001019150506128e3565b50858103612b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af8906149bf565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2261292e5f83b9170492ed43134e451136c943134b649673be882c18582dcbf784600001548560010154866002018b604051612b9394939291906149df565b60405180910390a35050505050612ba8612bfc565b505050565b600260005403612bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be990614a77565b60405180910390fd5b6002600081905550565b6001600081905550565b60008183612c149190614a97565b905092915050565b60008183612c2a9190614b08565b905092915050565b60008183612c409190613fba565b905092915050565b6000806000905060005b8351811015612c9d5760001515848281518110612c7257612c71613d16565b5b6020026020010151151503612c90578180612c8c90613e16565b9250505b8080600101915050612c52565b5080915050919050565b60008183612cb59190614919565b905092915050565b828054828255906000526020600020908101928215612cf9579160200282015b82811115612cf8578251825591602001919060010190612cdd565b5b509050612d069190612f39565b5090565b828054828255906000526020600020908101928215612d83579160200282015b82811115612d825782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612d2a565b5b509050612d909190612f39565b5090565b82805482825590600052602060002090601f01602090048101928215612e295791602002820160005b83821115612dfa57835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302612dbd565b8015612e275782816101000a81549060ff0219169055600101602081600001049283019260010302612dfa565b505b509050612e369190612f39565b5090565b604051806101400160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600015158152602001600081525090565b60405180610120016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160008152602001606081526020016000151581525090565b5b80821115612f52576000816000905550600101612f3a565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f90578082015181840152602081019050612f75565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fb882612f56565b612fc28185612f61565b9350612fd2818560208601612f72565b612fdb81612f9c565b840191505092915050565b600060208201905081810360008301526130008184612fad565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61305982612f9c565b810181811067ffffffffffffffff8211171561307857613077613021565b5b80604052505050565b600061308b613008565b90506130978282613050565b919050565b600067ffffffffffffffff8211156130b7576130b6613021565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6130e0816130cd565b81146130eb57600080fd5b50565b6000813590506130fd816130d7565b92915050565b60006131166131118461309c565b613081565b90508083825260208201905060208402830185811115613139576131386130c8565b5b835b81811015613162578061314e88826130ee565b84526020840193505060208101905061313b565b5050509392505050565b600082601f8301126131815761318061301c565b5b8135613191848260208601613103565b91505092915050565b60008115159050919050565b6131af8161319a565b81146131ba57600080fd5b50565b6000813590506131cc816131a6565b92915050565b600080600080608085870312156131ec576131eb613012565b5b600085013567ffffffffffffffff81111561320a57613209613017565b5b6132168782880161316c565b9450506020613227878288016130ee565b9350506040613238878288016131bd565b9250506060613249878288016130ee565b91505092959194509250565b60008060006060848603121561326e5761326d613012565b5b600061327c868287016130ee565b935050602061328d868287016130ee565b925050604061329e868287016130ee565b9150509250925092565b600080fd5b600067ffffffffffffffff8211156132c8576132c7613021565b5b6132d182612f9c565b9050602081019050919050565b82818337600083830152505050565b60006133006132fb846132ad565b613081565b90508281526020810184848401111561331c5761331b6132a8565b5b6133278482856132de565b509392505050565b600082601f8301126133445761334361301c565b5b81356133548482602086016132ed565b91505092915050565b60006020828403121561337357613372613012565b5b600082013567ffffffffffffffff81111561339157613390613017565b5b61339d8482850161332f565b91505092915050565b6133af816130cd565b82525050565b60006020820190506133ca60008301846133a6565b92915050565b600080604083850312156133e7576133e6613012565b5b60006133f5858286016130ee565b9250506020613406858286016130ee565b9150509250929050565b60006020828403121561342657613425613012565b5b6000613434848285016130ee565b91505092915050565b600082825260208201905092915050565b600061345982612f56565b613463818561343d565b9350613473818560208601612f72565b61347c81612f9c565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006134cc6134c76134c284613487565b6134a7565b613487565b9050919050565b60006134de826134b1565b9050919050565b60006134f0826134d3565b9050919050565b613500816134e5565b82525050565b61350f816130cd565b82525050565b600061352082613487565b9050919050565b61353081613515565b82525050565b61353f8161319a565b82525050565b6000610140830160008301518482036000860152613563828261344e565b9150506020830151848203602086015261357d828261344e565b91505060408301518482036040860152613597828261344e565b91505060608301516135ac60608601826134f7565b5060808301516135bf6080860182613506565b5060a08301516135d260a0860182613527565b5060c08301516135e560c0860182613527565b5060e08301516135f860e0860182613536565b5061010083015161360d610100860182613536565b50610120830151613622610120860182613506565b508091505092915050565b600060208201905081810360008301526136478184613545565b905092915050565b600061365a82613487565b9050919050565b61366a8161364f565b811461367557600080fd5b50565b60008135905061368781613661565b92915050565b6000602082840312156136a3576136a2613012565b5b60006136b184828501613678565b91505092915050565b6136c38161364f565b82525050565b60006020820190506136de60008301846136ba565b92915050565b6136ed81613515565b81146136f857600080fd5b50565b60008135905061370a816136e4565b92915050565b6000806000806000806000806000806101408b8d03121561373457613733613012565b5b60006137428d828e016130ee565b9a505060208b013567ffffffffffffffff81111561376357613762613017565b5b61376f8d828e0161332f565b99505060408b013567ffffffffffffffff8111156137905761378f613017565b5b61379c8d828e0161332f565b98505060608b013567ffffffffffffffff8111156137bd576137bc613017565b5b6137c98d828e0161332f565b97505060806137da8d828e016130ee565b96505060a06137eb8d828e016130ee565b95505060c06137fc8d828e01613678565b94505060e061380d8d828e016136fb565b93505061010061381f8d828e016131bd565b9250506101206138318d828e016131bd565b9150509295989b9194979a5092959850565b600080600080600080600060e0888a03121561386257613861613012565b5b600088013567ffffffffffffffff8111156138805761387f613017565b5b61388c8a828b0161332f565b975050602088013567ffffffffffffffff8111156138ad576138ac613017565b5b6138b98a828b0161332f565b965050604088013567ffffffffffffffff8111156138da576138d9613017565b5b6138e68a828b0161332f565b95505060606138f78a828b016130ee565b94505060806139088a828b016130ee565b93505060a06139198a828b01613678565b92505060c061392a8a828b016136fb565b91505092959891949750929550565b600080600080600060a0868803121561395557613954613012565b5b6000613963888289016130ee565b9550506020613974888289016130ee565b9450506040613985888289016130ee565b9350506060613996888289016131bd565b92505060806139a7888289016131bd565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006139ec8383613506565b60208301905092915050565b6000602082019050919050565b6000613a10826139b4565b613a1a81856139bf565b9350613a25836139d0565b8060005b83811015613a56578151613a3d88826139e0565b9750613a48836139f8565b925050600181019050613a29565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613a9b8383613527565b60208301905092915050565b6000602082019050919050565b6000613abf82613a63565b613ac98185613a6e565b9350613ad483613a7f565b8060005b83811015613b05578151613aec8882613a8f565b9750613af783613aa7565b925050600181019050613ad8565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613b4a8383613536565b60208301905092915050565b6000602082019050919050565b6000613b6e82613b12565b613b788185613b1d565b9350613b8383613b2e565b8060005b83811015613bb4578151613b9b8882613b3e565b9750613ba683613b56565b925050600181019050613b87565b5085935050505092915050565b600061012083016000830151613bda6000860182613506565b506020830151613bed6020860182613506565b5060408301518482036040860152613c058282613a05565b91505060608301518482036060860152613c1f8282613ab4565b9150506080830151613c346080860182613527565b5060a0830151613c4760a0860182613536565b5060c0830151613c5a60c0860182613506565b5060e083015184820360e0860152613c728282613b63565b915050610100830151613c89610100860182613536565b508091505092915050565b60006020820190508181036000830152613cae8184613bc1565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613cfd57607f821691505b602082108103613d1057613d0f613cb6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613d5a60008301856136ba565b613d6760208301846133a6565b9392505050565b6000606082019050613d8360008301866136ba565b613d9060208301856136ba565b613d9d60408301846133a6565b949350505050565b600081519050613db481613661565b92915050565b600060208284031215613dd057613dcf613012565b5b6000613dde84828501613da5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e21826130cd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e5357613e52613de7565b5b600182019050919050565b600082825260208201905092915050565b6000613e7a826139b4565b613e848185613e5e565b9350613e8f836139d0565b8060005b83811015613ec0578151613ea788826139e0565b9750613eb2836139f8565b925050600181019050613e93565b5085935050505092915050565b600082825260208201905092915050565b6000613ee982613a63565b613ef38185613ecd565b9350613efe83613a7f565b8060005b83811015613f2f578151613f168882613a8f565b9750613f2183613aa7565b925050600181019050613f02565b5085935050505092915050565b613f458161319a565b82525050565b600060c082019050613f6060008301896133a6565b613f6d60208301886133a6565b8181036040830152613f7f8187613e6f565b90508181036060830152613f938186613ede565b9050613fa26080830185613f3c565b613faf60a08301846133a6565b979650505050505050565b6000613fc5826130cd565b9150613fd0836130cd565b9250828201905080821115613fe857613fe7613de7565b5b92915050565b6000613ff9826130cd565b91506000820361400c5761400b613de7565b5b600182039050919050565b7f547279696e6720746f206275792066726f6d20697473656c6600000000000000600082015250565b600061404d601983612f61565b915061405882614017565b602082019050919050565b6000602082019050818103600083015261407c81614040565b9050919050565b600081549050919050565b60008190508160005260206000209050919050565b60008160001c9050919050565b6000819050919050565b60006140cd6140c8836140a3565b6140b0565b9050919050565b60006140e082546140ba565b9050919050565b6000600182019050919050565b60006140ff82614083565b6141098185613e5e565b93506141148361408e565b8060005b8381101561414c57614129826140d4565b61413388826139e0565b975061413e836140e7565b925050600181019050614118565b5085935050505092915050565b600060a08201905061416e60008301886133a6565b61417b60208301876133a6565b818103604083015261418d81866140f4565b905061419c60608301856133a6565b6141a960808301846133a6565b9695505050505050565b600081905092915050565b60006141c982612f56565b6141d381856141b3565b93506141e3818560208601612f72565b80840191505092915050565b60006141fb82846141be565b915081905092915050565b7f636f6c6c65637469626c652073686f756c642065786973740000000000000000600082015250565b600061423c601883612f61565b915061424782614206565b602082019050919050565b6000602082019050818103600083015261426b8161422f565b9050919050565b7f63616e2073746f70206f6e6c792061756374696f6e20636f6c6c65637469626c60008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006142ce602183612f61565b91506142d982614272565b604082019050919050565b600060208201905081810360008301526142fd816142c1565b9050919050565b7f6f6e6c79206d61726b6574206f776e65722063616e2073746f7020617563746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b6000614360602283612f61565b915061436b82614304565b604082019050919050565b6000602082019050818103600083015261438f81614353565b9050919050565b7f63616e207374617274206f6e6c792061756374696f6e20636f6c6c656374696260008201527f6c65000000000000000000000000000000000000000000000000000000000000602082015250565b60006143f2602283612f61565b91506143fd82614396565b604082019050919050565b60006020820190508181036000830152614421816143e5565b9050919050565b7f6f6e6c79206d61726b6574206f776e65722063616e207374617274206175637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b6000614484602383612f61565b915061448f82614428565b604082019050919050565b600060208201905081810360008301526144b381614477565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546144e781613ce5565b6144f181866144ba565b9450600182166000811461450c576001811461452157614554565b60ff1983168652811515820286019350614554565b61452a856144c5565b60005b8381101561454c5781548189015260018201915060208101905061452d565b838801955050505b50505092915050565b600061456982846144da565b915081905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026145d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614599565b6145e08683614599565b95508019841693508086168417925050509392505050565b600061461361460e614609846130cd565b6134a7565b6130cd565b9050919050565b6000819050919050565b61462d836145f8565b6146416146398261461a565b8484546145a6565b825550505050565b600090565b614656614649565b614661818484614624565b505050565b5b818110156146855761467a60008261464e565b600181019050614667565b5050565b601f8211156146ca5761469b81614574565b6146a484614589565b810160208510156146b3578190505b6146c76146bf85614589565b830182614666565b50505b505050565b600082821c905092915050565b60006146ed600019846008026146cf565b1980831691505092915050565b600061470683836146dc565b9150826002028217905092915050565b61471f82612f56565b67ffffffffffffffff81111561473857614737613021565b5b6147428254613ce5565b61474d828285614689565b600060209050601f831160018114614780576000841561476e578287015190505b61477885826146fa565b8655506147e0565b601f19841661478e86614574565b60005b828110156147b657848901518255600182019150602085019450602081019050614791565b868310156147d357848901516147cf601f8916826146dc565b8355505b6001600288020188555050505b505050505050565b600060e0820190506147fd600083018a6133a6565b818103602083015261480f8189612fad565b905081810360408301526148238188612fad565b905061483260608301876133a6565b61483f60808301866133a6565b61484c60a0830185613f3c565b61485960c0830184613f3c565b98975050505050505050565b600060a08201905061487a60008301886133a6565b818103602083015261488c8187612fad565b905081810360408301526148a08186612fad565b90506148af60608301856133a6565b6148bc60808301846133a6565b9695505050505050565b600060a0820190506148db60008301886133a6565b6148e860208301876133a6565b6148f56040830186613f3c565b6149026060830185613f3c565b61490f60808301846136ba565b9695505050505050565b6000614924826130cd565b915061492f836130cd565b925082820390508181111561494757614946613de7565b5b92915050565b7f43616e2073656c6c206f6e6c7920746f6b656e7320746861742062656c6f6e6760008201527f7320746f206f776e657200000000000000000000000000000000000000000000602082015250565b60006149a9602a83612f61565b91506149b48261494d565b604082019050919050565b600060208201905081810360008301526149d88161499c565b9050919050565b60006080820190506149f460008301876133a6565b614a0160208301866133a6565b8181036040830152614a1381856140f4565b9050614a2260608301846133a6565b95945050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614a61601f83612f61565b9150614a6c82614a2b565b602082019050919050565b60006020820190508181036000830152614a9081614a54565b9050919050565b6000614aa2826130cd565b9150614aad836130cd565b9250828202614abb816130cd565b91508282048414831517614ad257614ad1613de7565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b13826130cd565b9150614b1e836130cd565b925082614b2e57614b2d614ad9565b5b82820490509291505056fea2646970667358221220bc0660d435525cfd57c050fb3b7358f0d51de443e868f013039121f0463e173164736f6c634300081c0033",
}

// MarketplaceABI is the input ABI used to generate the binding from.
// Deprecated: Use MarketplaceMetaData.ABI instead.
var MarketplaceABI = MarketplaceMetaData.ABI

// MarketplaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MarketplaceMetaData.Bin instead.
var MarketplaceBin = MarketplaceMetaData.Bin

// DeployMarketplace deploys a new Ethereum contract, binding an instance of Marketplace to it.
func DeployMarketplace(auth *bind.TransactOpts, backend bind.ContractBackend, marketName string, marketFee *big.Int) (common.Address, *types.Transaction, *Marketplace, error) {
	parsed, err := MarketplaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MarketplaceBin), backend, marketName, marketFee)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Marketplace{MarketplaceCaller: MarketplaceCaller{contract: contract}, MarketplaceTransactor: MarketplaceTransactor{contract: contract}, MarketplaceFilterer: MarketplaceFilterer{contract: contract}}, nil
}

// Marketplace is an auto generated Go binding around an Ethereum contract.
type Marketplace struct {
	MarketplaceCaller     // Read-only binding to the contract
	MarketplaceTransactor // Write-only binding to the contract
	MarketplaceFilterer   // Log filterer for contract events
}

// MarketplaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type MarketplaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketplaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MarketplaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketplaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MarketplaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MarketplaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MarketplaceSession struct {
	Contract     *Marketplace      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MarketplaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MarketplaceCallerSession struct {
	Contract *MarketplaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MarketplaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MarketplaceTransactorSession struct {
	Contract     *MarketplaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MarketplaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type MarketplaceRaw struct {
	Contract *Marketplace // Generic contract binding to access the raw methods on
}

// MarketplaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MarketplaceCallerRaw struct {
	Contract *MarketplaceCaller // Generic read-only contract binding to access the raw methods on
}

// MarketplaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MarketplaceTransactorRaw struct {
	Contract *MarketplaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMarketplace creates a new instance of Marketplace, bound to a specific deployed contract.
func NewMarketplace(address common.Address, backend bind.ContractBackend) (*Marketplace, error) {
	contract, err := bindMarketplace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Marketplace{MarketplaceCaller: MarketplaceCaller{contract: contract}, MarketplaceTransactor: MarketplaceTransactor{contract: contract}, MarketplaceFilterer: MarketplaceFilterer{contract: contract}}, nil
}

// NewMarketplaceCaller creates a new read-only instance of Marketplace, bound to a specific deployed contract.
func NewMarketplaceCaller(address common.Address, caller bind.ContractCaller) (*MarketplaceCaller, error) {
	contract, err := bindMarketplace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MarketplaceCaller{contract: contract}, nil
}

// NewMarketplaceTransactor creates a new write-only instance of Marketplace, bound to a specific deployed contract.
func NewMarketplaceTransactor(address common.Address, transactor bind.ContractTransactor) (*MarketplaceTransactor, error) {
	contract, err := bindMarketplace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MarketplaceTransactor{contract: contract}, nil
}

// NewMarketplaceFilterer creates a new log filterer instance of Marketplace, bound to a specific deployed contract.
func NewMarketplaceFilterer(address common.Address, filterer bind.ContractFilterer) (*MarketplaceFilterer, error) {
	contract, err := bindMarketplace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MarketplaceFilterer{contract: contract}, nil
}

// bindMarketplace binds a generic wrapper to an already deployed contract.
func bindMarketplace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MarketplaceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Marketplace *MarketplaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Marketplace.Contract.MarketplaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Marketplace *MarketplaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Marketplace.Contract.MarketplaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Marketplace *MarketplaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Marketplace.Contract.MarketplaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Marketplace *MarketplaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Marketplace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Marketplace *MarketplaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Marketplace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Marketplace *MarketplaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Marketplace.Contract.contract.Transact(opts, method, params...)
}

// GetCollectible is a free data retrieval call binding the contract method 0x9d25841b.
//
// Solidity: function getCollectible(uint256 _collectionId, uint256 _collectibleId) view returns((uint256,uint256,uint256[],address[],address,bool,uint256,bool[],bool))
func (_Marketplace *MarketplaceCaller) GetCollectible(opts *bind.CallOpts, _collectionId *big.Int, _collectibleId *big.Int) (MarketplaceCollectible, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getCollectible", _collectionId, _collectibleId)

	if err != nil {
		return *new(MarketplaceCollectible), err
	}

	out0 := *abi.ConvertType(out[0], new(MarketplaceCollectible)).(*MarketplaceCollectible)

	return out0, err

}

// GetCollectible is a free data retrieval call binding the contract method 0x9d25841b.
//
// Solidity: function getCollectible(uint256 _collectionId, uint256 _collectibleId) view returns((uint256,uint256,uint256[],address[],address,bool,uint256,bool[],bool))
func (_Marketplace *MarketplaceSession) GetCollectible(_collectionId *big.Int, _collectibleId *big.Int) (MarketplaceCollectible, error) {
	return _Marketplace.Contract.GetCollectible(&_Marketplace.CallOpts, _collectionId, _collectibleId)
}

// GetCollectible is a free data retrieval call binding the contract method 0x9d25841b.
//
// Solidity: function getCollectible(uint256 _collectionId, uint256 _collectibleId) view returns((uint256,uint256,uint256[],address[],address,bool,uint256,bool[],bool))
func (_Marketplace *MarketplaceCallerSession) GetCollectible(_collectionId *big.Int, _collectibleId *big.Int) (MarketplaceCollectible, error) {
	return _Marketplace.Contract.GetCollectible(&_Marketplace.CallOpts, _collectionId, _collectibleId)
}

// GetCollectibleCount is a free data retrieval call binding the contract method 0x4be69a1a.
//
// Solidity: function getCollectibleCount(uint256 _collectionId) view returns(uint256)
func (_Marketplace *MarketplaceCaller) GetCollectibleCount(opts *bind.CallOpts, _collectionId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getCollectibleCount", _collectionId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCollectibleCount is a free data retrieval call binding the contract method 0x4be69a1a.
//
// Solidity: function getCollectibleCount(uint256 _collectionId) view returns(uint256)
func (_Marketplace *MarketplaceSession) GetCollectibleCount(_collectionId *big.Int) (*big.Int, error) {
	return _Marketplace.Contract.GetCollectibleCount(&_Marketplace.CallOpts, _collectionId)
}

// GetCollectibleCount is a free data retrieval call binding the contract method 0x4be69a1a.
//
// Solidity: function getCollectibleCount(uint256 _collectionId) view returns(uint256)
func (_Marketplace *MarketplaceCallerSession) GetCollectibleCount(_collectionId *big.Int) (*big.Int, error) {
	return _Marketplace.Contract.GetCollectibleCount(&_Marketplace.CallOpts, _collectionId)
}

// GetCollection is a free data retrieval call binding the contract method 0x5a1f3c28.
//
// Solidity: function getCollection(uint256 collectionId) view returns((string,string,string,address,uint256,address,address,bool,bool,uint256))
func (_Marketplace *MarketplaceCaller) GetCollection(opts *bind.CallOpts, collectionId *big.Int) (MarketplaceCollection, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getCollection", collectionId)

	if err != nil {
		return *new(MarketplaceCollection), err
	}

	out0 := *abi.ConvertType(out[0], new(MarketplaceCollection)).(*MarketplaceCollection)

	return out0, err

}

// GetCollection is a free data retrieval call binding the contract method 0x5a1f3c28.
//
// Solidity: function getCollection(uint256 collectionId) view returns((string,string,string,address,uint256,address,address,bool,bool,uint256))
func (_Marketplace *MarketplaceSession) GetCollection(collectionId *big.Int) (MarketplaceCollection, error) {
	return _Marketplace.Contract.GetCollection(&_Marketplace.CallOpts, collectionId)
}

// GetCollection is a free data retrieval call binding the contract method 0x5a1f3c28.
//
// Solidity: function getCollection(uint256 collectionId) view returns((string,string,string,address,uint256,address,address,bool,bool,uint256))
func (_Marketplace *MarketplaceCallerSession) GetCollection(collectionId *big.Int) (MarketplaceCollection, error) {
	return _Marketplace.Contract.GetCollection(&_Marketplace.CallOpts, collectionId)
}

// GetCollectionCounter is a free data retrieval call binding the contract method 0x835b83aa.
//
// Solidity: function getCollectionCounter() view returns(uint256)
func (_Marketplace *MarketplaceCaller) GetCollectionCounter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getCollectionCounter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCollectionCounter is a free data retrieval call binding the contract method 0x835b83aa.
//
// Solidity: function getCollectionCounter() view returns(uint256)
func (_Marketplace *MarketplaceSession) GetCollectionCounter() (*big.Int, error) {
	return _Marketplace.Contract.GetCollectionCounter(&_Marketplace.CallOpts)
}

// GetCollectionCounter is a free data retrieval call binding the contract method 0x835b83aa.
//
// Solidity: function getCollectionCounter() view returns(uint256)
func (_Marketplace *MarketplaceCallerSession) GetCollectionCounter() (*big.Int, error) {
	return _Marketplace.Contract.GetCollectionCounter(&_Marketplace.CallOpts)
}

// GetCollectionIdByName is a free data retrieval call binding the contract method 0x431e8d63.
//
// Solidity: function getCollectionIdByName(string name) view returns(uint256)
func (_Marketplace *MarketplaceCaller) GetCollectionIdByName(opts *bind.CallOpts, name string) (*big.Int, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getCollectionIdByName", name)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCollectionIdByName is a free data retrieval call binding the contract method 0x431e8d63.
//
// Solidity: function getCollectionIdByName(string name) view returns(uint256)
func (_Marketplace *MarketplaceSession) GetCollectionIdByName(name string) (*big.Int, error) {
	return _Marketplace.Contract.GetCollectionIdByName(&_Marketplace.CallOpts, name)
}

// GetCollectionIdByName is a free data retrieval call binding the contract method 0x431e8d63.
//
// Solidity: function getCollectionIdByName(string name) view returns(uint256)
func (_Marketplace *MarketplaceCallerSession) GetCollectionIdByName(name string) (*big.Int, error) {
	return _Marketplace.Contract.GetCollectionIdByName(&_Marketplace.CallOpts, name)
}

// GetFee is a free data retrieval call binding the contract method 0xced72f87.
//
// Solidity: function getFee() view returns(uint256)
func (_Marketplace *MarketplaceCaller) GetFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFee is a free data retrieval call binding the contract method 0xced72f87.
//
// Solidity: function getFee() view returns(uint256)
func (_Marketplace *MarketplaceSession) GetFee() (*big.Int, error) {
	return _Marketplace.Contract.GetFee(&_Marketplace.CallOpts)
}

// GetFee is a free data retrieval call binding the contract method 0xced72f87.
//
// Solidity: function getFee() view returns(uint256)
func (_Marketplace *MarketplaceCallerSession) GetFee() (*big.Int, error) {
	return _Marketplace.Contract.GetFee(&_Marketplace.CallOpts)
}

// GetName is a free data retrieval call binding the contract method 0x17d7de7c.
//
// Solidity: function getName() view returns(string)
func (_Marketplace *MarketplaceCaller) GetName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetName is a free data retrieval call binding the contract method 0x17d7de7c.
//
// Solidity: function getName() view returns(string)
func (_Marketplace *MarketplaceSession) GetName() (string, error) {
	return _Marketplace.Contract.GetName(&_Marketplace.CallOpts)
}

// GetName is a free data retrieval call binding the contract method 0x17d7de7c.
//
// Solidity: function getName() view returns(string)
func (_Marketplace *MarketplaceCallerSession) GetName() (string, error) {
	return _Marketplace.Contract.GetName(&_Marketplace.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Marketplace *MarketplaceCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Marketplace *MarketplaceSession) GetOwner() (common.Address, error) {
	return _Marketplace.Contract.GetOwner(&_Marketplace.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Marketplace *MarketplaceCallerSession) GetOwner() (common.Address, error) {
	return _Marketplace.Contract.GetOwner(&_Marketplace.CallOpts)
}

// GetUserFunds is a free data retrieval call binding the contract method 0x8740cd4e.
//
// Solidity: function getUserFunds(address userAddress) view returns(uint256)
func (_Marketplace *MarketplaceCaller) GetUserFunds(opts *bind.CallOpts, userAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Marketplace.contract.Call(opts, &out, "getUserFunds", userAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUserFunds is a free data retrieval call binding the contract method 0x8740cd4e.
//
// Solidity: function getUserFunds(address userAddress) view returns(uint256)
func (_Marketplace *MarketplaceSession) GetUserFunds(userAddress common.Address) (*big.Int, error) {
	return _Marketplace.Contract.GetUserFunds(&_Marketplace.CallOpts, userAddress)
}

// GetUserFunds is a free data retrieval call binding the contract method 0x8740cd4e.
//
// Solidity: function getUserFunds(address userAddress) view returns(uint256)
func (_Marketplace *MarketplaceCallerSession) GetUserFunds(userAddress common.Address) (*big.Int, error) {
	return _Marketplace.Contract.GetUserFunds(&_Marketplace.CallOpts, userAddress)
}

// Buy is a paid mutator transaction binding the contract method 0x40993b26.
//
// Solidity: function buy(uint256 _collectionId, uint256 _collectibleId, uint256 _quantity) payable returns()
func (_Marketplace *MarketplaceTransactor) Buy(opts *bind.TransactOpts, _collectionId *big.Int, _collectibleId *big.Int, _quantity *big.Int) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "buy", _collectionId, _collectibleId, _quantity)
}

// Buy is a paid mutator transaction binding the contract method 0x40993b26.
//
// Solidity: function buy(uint256 _collectionId, uint256 _collectibleId, uint256 _quantity) payable returns()
func (_Marketplace *MarketplaceSession) Buy(_collectionId *big.Int, _collectibleId *big.Int, _quantity *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.Buy(&_Marketplace.TransactOpts, _collectionId, _collectibleId, _quantity)
}

// Buy is a paid mutator transaction binding the contract method 0x40993b26.
//
// Solidity: function buy(uint256 _collectionId, uint256 _collectibleId, uint256 _quantity) payable returns()
func (_Marketplace *MarketplaceTransactorSession) Buy(_collectionId *big.Int, _collectibleId *big.Int, _quantity *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.Buy(&_Marketplace.TransactOpts, _collectionId, _collectibleId, _quantity)
}

// ClaimFunds is a paid mutator transaction binding the contract method 0xac307773.
//
// Solidity: function claimFunds() payable returns()
func (_Marketplace *MarketplaceTransactor) ClaimFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "claimFunds")
}

// ClaimFunds is a paid mutator transaction binding the contract method 0xac307773.
//
// Solidity: function claimFunds() payable returns()
func (_Marketplace *MarketplaceSession) ClaimFunds() (*types.Transaction, error) {
	return _Marketplace.Contract.ClaimFunds(&_Marketplace.TransactOpts)
}

// ClaimFunds is a paid mutator transaction binding the contract method 0xac307773.
//
// Solidity: function claimFunds() payable returns()
func (_Marketplace *MarketplaceTransactorSession) ClaimFunds() (*types.Transaction, error) {
	return _Marketplace.Contract.ClaimFunds(&_Marketplace.TransactOpts)
}

// CreateCollectible is a paid mutator transaction binding the contract method 0x27766e75.
//
// Solidity: function createCollectible(uint256[] _tokenIds, uint256 _collectionId, bool _isAuction, uint256 _price) returns()
func (_Marketplace *MarketplaceTransactor) CreateCollectible(opts *bind.TransactOpts, _tokenIds []*big.Int, _collectionId *big.Int, _isAuction bool, _price *big.Int) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "createCollectible", _tokenIds, _collectionId, _isAuction, _price)
}

// CreateCollectible is a paid mutator transaction binding the contract method 0x27766e75.
//
// Solidity: function createCollectible(uint256[] _tokenIds, uint256 _collectionId, bool _isAuction, uint256 _price) returns()
func (_Marketplace *MarketplaceSession) CreateCollectible(_tokenIds []*big.Int, _collectionId *big.Int, _isAuction bool, _price *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.CreateCollectible(&_Marketplace.TransactOpts, _tokenIds, _collectionId, _isAuction, _price)
}

// CreateCollectible is a paid mutator transaction binding the contract method 0x27766e75.
//
// Solidity: function createCollectible(uint256[] _tokenIds, uint256 _collectionId, bool _isAuction, uint256 _price) returns()
func (_Marketplace *MarketplaceTransactorSession) CreateCollectible(_tokenIds []*big.Int, _collectionId *big.Int, _isAuction bool, _price *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.CreateCollectible(&_Marketplace.TransactOpts, _tokenIds, _collectionId, _isAuction, _price)
}

// CreateCollection is a paid mutator transaction binding the contract method 0x8fdffd3c.
//
// Solidity: function createCollection(string name, string symbol, string description, uint256 fee, uint256 maxItemsInCollection, address nftCollection, address owner) returns()
func (_Marketplace *MarketplaceTransactor) CreateCollection(opts *bind.TransactOpts, name string, symbol string, description string, fee *big.Int, maxItemsInCollection *big.Int, nftCollection common.Address, owner common.Address) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "createCollection", name, symbol, description, fee, maxItemsInCollection, nftCollection, owner)
}

// CreateCollection is a paid mutator transaction binding the contract method 0x8fdffd3c.
//
// Solidity: function createCollection(string name, string symbol, string description, uint256 fee, uint256 maxItemsInCollection, address nftCollection, address owner) returns()
func (_Marketplace *MarketplaceSession) CreateCollection(name string, symbol string, description string, fee *big.Int, maxItemsInCollection *big.Int, nftCollection common.Address, owner common.Address) (*types.Transaction, error) {
	return _Marketplace.Contract.CreateCollection(&_Marketplace.TransactOpts, name, symbol, description, fee, maxItemsInCollection, nftCollection, owner)
}

// CreateCollection is a paid mutator transaction binding the contract method 0x8fdffd3c.
//
// Solidity: function createCollection(string name, string symbol, string description, uint256 fee, uint256 maxItemsInCollection, address nftCollection, address owner) returns()
func (_Marketplace *MarketplaceTransactorSession) CreateCollection(name string, symbol string, description string, fee *big.Int, maxItemsInCollection *big.Int, nftCollection common.Address, owner common.Address) (*types.Transaction, error) {
	return _Marketplace.Contract.CreateCollection(&_Marketplace.TransactOpts, name, symbol, description, fee, maxItemsInCollection, nftCollection, owner)
}

// EditCollectible is a paid mutator transaction binding the contract method 0x953ff535.
//
// Solidity: function editCollectible(uint256 _collectionId, uint256 _collectibleId, uint256 _price, bool _isLocked, bool _isAuction) returns()
func (_Marketplace *MarketplaceTransactor) EditCollectible(opts *bind.TransactOpts, _collectionId *big.Int, _collectibleId *big.Int, _price *big.Int, _isLocked bool, _isAuction bool) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "editCollectible", _collectionId, _collectibleId, _price, _isLocked, _isAuction)
}

// EditCollectible is a paid mutator transaction binding the contract method 0x953ff535.
//
// Solidity: function editCollectible(uint256 _collectionId, uint256 _collectibleId, uint256 _price, bool _isLocked, bool _isAuction) returns()
func (_Marketplace *MarketplaceSession) EditCollectible(_collectionId *big.Int, _collectibleId *big.Int, _price *big.Int, _isLocked bool, _isAuction bool) (*types.Transaction, error) {
	return _Marketplace.Contract.EditCollectible(&_Marketplace.TransactOpts, _collectionId, _collectibleId, _price, _isLocked, _isAuction)
}

// EditCollectible is a paid mutator transaction binding the contract method 0x953ff535.
//
// Solidity: function editCollectible(uint256 _collectionId, uint256 _collectibleId, uint256 _price, bool _isLocked, bool _isAuction) returns()
func (_Marketplace *MarketplaceTransactorSession) EditCollectible(_collectionId *big.Int, _collectibleId *big.Int, _price *big.Int, _isLocked bool, _isAuction bool) (*types.Transaction, error) {
	return _Marketplace.Contract.EditCollectible(&_Marketplace.TransactOpts, _collectionId, _collectibleId, _price, _isLocked, _isAuction)
}

// EditCollection is a paid mutator transaction binding the contract method 0x8ec162aa.
//
// Solidity: function editCollection(uint256 id, string name, string symbol, string description, uint256 fee, uint256 maxItemsInCollection, address nftCollection, address owner, bool isApproved, bool isLocked) returns()
func (_Marketplace *MarketplaceTransactor) EditCollection(opts *bind.TransactOpts, id *big.Int, name string, symbol string, description string, fee *big.Int, maxItemsInCollection *big.Int, nftCollection common.Address, owner common.Address, isApproved bool, isLocked bool) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "editCollection", id, name, symbol, description, fee, maxItemsInCollection, nftCollection, owner, isApproved, isLocked)
}

// EditCollection is a paid mutator transaction binding the contract method 0x8ec162aa.
//
// Solidity: function editCollection(uint256 id, string name, string symbol, string description, uint256 fee, uint256 maxItemsInCollection, address nftCollection, address owner, bool isApproved, bool isLocked) returns()
func (_Marketplace *MarketplaceSession) EditCollection(id *big.Int, name string, symbol string, description string, fee *big.Int, maxItemsInCollection *big.Int, nftCollection common.Address, owner common.Address, isApproved bool, isLocked bool) (*types.Transaction, error) {
	return _Marketplace.Contract.EditCollection(&_Marketplace.TransactOpts, id, name, symbol, description, fee, maxItemsInCollection, nftCollection, owner, isApproved, isLocked)
}

// EditCollection is a paid mutator transaction binding the contract method 0x8ec162aa.
//
// Solidity: function editCollection(uint256 id, string name, string symbol, string description, uint256 fee, uint256 maxItemsInCollection, address nftCollection, address owner, bool isApproved, bool isLocked) returns()
func (_Marketplace *MarketplaceTransactorSession) EditCollection(id *big.Int, name string, symbol string, description string, fee *big.Int, maxItemsInCollection *big.Int, nftCollection common.Address, owner common.Address, isApproved bool, isLocked bool) (*types.Transaction, error) {
	return _Marketplace.Contract.EditCollection(&_Marketplace.TransactOpts, id, name, symbol, description, fee, maxItemsInCollection, nftCollection, owner, isApproved, isLocked)
}

// EndAuction is a paid mutator transaction binding the contract method 0x47afe437.
//
// Solidity: function endAuction(uint256 _collectionId, uint256 _collectibleId) returns()
func (_Marketplace *MarketplaceTransactor) EndAuction(opts *bind.TransactOpts, _collectionId *big.Int, _collectibleId *big.Int) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "endAuction", _collectionId, _collectibleId)
}

// EndAuction is a paid mutator transaction binding the contract method 0x47afe437.
//
// Solidity: function endAuction(uint256 _collectionId, uint256 _collectibleId) returns()
func (_Marketplace *MarketplaceSession) EndAuction(_collectionId *big.Int, _collectibleId *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.EndAuction(&_Marketplace.TransactOpts, _collectionId, _collectibleId)
}

// EndAuction is a paid mutator transaction binding the contract method 0x47afe437.
//
// Solidity: function endAuction(uint256 _collectionId, uint256 _collectibleId) returns()
func (_Marketplace *MarketplaceTransactorSession) EndAuction(_collectionId *big.Int, _collectibleId *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.EndAuction(&_Marketplace.TransactOpts, _collectionId, _collectibleId)
}

// Sell is a paid mutator transaction binding the contract method 0xd3c9727c.
//
// Solidity: function sell(uint256 _collectionId, uint256 _collectibleId, uint256 _quantity) payable returns()
func (_Marketplace *MarketplaceTransactor) Sell(opts *bind.TransactOpts, _collectionId *big.Int, _collectibleId *big.Int, _quantity *big.Int) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "sell", _collectionId, _collectibleId, _quantity)
}

// Sell is a paid mutator transaction binding the contract method 0xd3c9727c.
//
// Solidity: function sell(uint256 _collectionId, uint256 _collectibleId, uint256 _quantity) payable returns()
func (_Marketplace *MarketplaceSession) Sell(_collectionId *big.Int, _collectibleId *big.Int, _quantity *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.Sell(&_Marketplace.TransactOpts, _collectionId, _collectibleId, _quantity)
}

// Sell is a paid mutator transaction binding the contract method 0xd3c9727c.
//
// Solidity: function sell(uint256 _collectionId, uint256 _collectibleId, uint256 _quantity) payable returns()
func (_Marketplace *MarketplaceTransactorSession) Sell(_collectionId *big.Int, _collectibleId *big.Int, _quantity *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.Sell(&_Marketplace.TransactOpts, _collectionId, _collectibleId, _quantity)
}

// SetFee is a paid mutator transaction binding the contract method 0x69fe0e2d.
//
// Solidity: function setFee(uint256 marketFee) returns()
func (_Marketplace *MarketplaceTransactor) SetFee(opts *bind.TransactOpts, marketFee *big.Int) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "setFee", marketFee)
}

// SetFee is a paid mutator transaction binding the contract method 0x69fe0e2d.
//
// Solidity: function setFee(uint256 marketFee) returns()
func (_Marketplace *MarketplaceSession) SetFee(marketFee *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.SetFee(&_Marketplace.TransactOpts, marketFee)
}

// SetFee is a paid mutator transaction binding the contract method 0x69fe0e2d.
//
// Solidity: function setFee(uint256 marketFee) returns()
func (_Marketplace *MarketplaceTransactorSession) SetFee(marketFee *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.SetFee(&_Marketplace.TransactOpts, marketFee)
}

// SetName is a paid mutator transaction binding the contract method 0xc47f0027.
//
// Solidity: function setName(string marketName) returns()
func (_Marketplace *MarketplaceTransactor) SetName(opts *bind.TransactOpts, marketName string) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "setName", marketName)
}

// SetName is a paid mutator transaction binding the contract method 0xc47f0027.
//
// Solidity: function setName(string marketName) returns()
func (_Marketplace *MarketplaceSession) SetName(marketName string) (*types.Transaction, error) {
	return _Marketplace.Contract.SetName(&_Marketplace.TransactOpts, marketName)
}

// SetName is a paid mutator transaction binding the contract method 0xc47f0027.
//
// Solidity: function setName(string marketName) returns()
func (_Marketplace *MarketplaceTransactorSession) SetName(marketName string) (*types.Transaction, error) {
	return _Marketplace.Contract.SetName(&_Marketplace.TransactOpts, marketName)
}

// StartAuction is a paid mutator transaction binding the contract method 0x4fee13fc.
//
// Solidity: function startAuction(uint256 _collectionId, uint256 _collectibleId) returns()
func (_Marketplace *MarketplaceTransactor) StartAuction(opts *bind.TransactOpts, _collectionId *big.Int, _collectibleId *big.Int) (*types.Transaction, error) {
	return _Marketplace.contract.Transact(opts, "startAuction", _collectionId, _collectibleId)
}

// StartAuction is a paid mutator transaction binding the contract method 0x4fee13fc.
//
// Solidity: function startAuction(uint256 _collectionId, uint256 _collectibleId) returns()
func (_Marketplace *MarketplaceSession) StartAuction(_collectionId *big.Int, _collectibleId *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.StartAuction(&_Marketplace.TransactOpts, _collectionId, _collectibleId)
}

// StartAuction is a paid mutator transaction binding the contract method 0x4fee13fc.
//
// Solidity: function startAuction(uint256 _collectionId, uint256 _collectibleId) returns()
func (_Marketplace *MarketplaceTransactorSession) StartAuction(_collectionId *big.Int, _collectibleId *big.Int) (*types.Transaction, error) {
	return _Marketplace.Contract.StartAuction(&_Marketplace.TransactOpts, _collectionId, _collectibleId)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Marketplace *MarketplaceTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Marketplace.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Marketplace *MarketplaceSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Marketplace.Contract.Fallback(&_Marketplace.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Marketplace *MarketplaceTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Marketplace.Contract.Fallback(&_Marketplace.TransactOpts, calldata)
}

// MarketplaceBuyIterator is returned from FilterBuy and is used to iterate over the raw logs and unpacked data for Buy events raised by the Marketplace contract.
type MarketplaceBuyIterator struct {
	Event *MarketplaceBuy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketplaceBuyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketplaceBuy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketplaceBuy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketplaceBuyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketplaceBuyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketplaceBuy represents a Buy event raised by the Marketplace contract.
type MarketplaceBuy struct {
	Id           *big.Int
	CollectionId *big.Int
	TokenIds     []*big.Int
	Price        *big.Int
	Buyer        common.Address
	Quantity     *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterBuy is a free log retrieval operation binding the contract event 0x91527f0b12cc8ffc1cb4c6d5df9e2d58087a96596ad766c47a62594f47a41dad.
//
// Solidity: event Buy(uint256 id, uint256 collectionId, uint256[] tokenIds, uint256 price, address indexed buyer, uint256 quantity)
func (_Marketplace *MarketplaceFilterer) FilterBuy(opts *bind.FilterOpts, buyer []common.Address) (*MarketplaceBuyIterator, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Marketplace.contract.FilterLogs(opts, "Buy", buyerRule)
	if err != nil {
		return nil, err
	}
	return &MarketplaceBuyIterator{contract: _Marketplace.contract, event: "Buy", logs: logs, sub: sub}, nil
}

// WatchBuy is a free log subscription operation binding the contract event 0x91527f0b12cc8ffc1cb4c6d5df9e2d58087a96596ad766c47a62594f47a41dad.
//
// Solidity: event Buy(uint256 id, uint256 collectionId, uint256[] tokenIds, uint256 price, address indexed buyer, uint256 quantity)
func (_Marketplace *MarketplaceFilterer) WatchBuy(opts *bind.WatchOpts, sink chan<- *MarketplaceBuy, buyer []common.Address) (event.Subscription, error) {

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Marketplace.contract.WatchLogs(opts, "Buy", buyerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketplaceBuy)
				if err := _Marketplace.contract.UnpackLog(event, "Buy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBuy is a log parse operation binding the contract event 0x91527f0b12cc8ffc1cb4c6d5df9e2d58087a96596ad766c47a62594f47a41dad.
//
// Solidity: event Buy(uint256 id, uint256 collectionId, uint256[] tokenIds, uint256 price, address indexed buyer, uint256 quantity)
func (_Marketplace *MarketplaceFilterer) ParseBuy(log types.Log) (*MarketplaceBuy, error) {
	event := new(MarketplaceBuy)
	if err := _Marketplace.contract.UnpackLog(event, "Buy", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketplaceClaimFundsIterator is returned from FilterClaimFunds and is used to iterate over the raw logs and unpacked data for ClaimFunds events raised by the Marketplace contract.
type MarketplaceClaimFundsIterator struct {
	Event *MarketplaceClaimFunds // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketplaceClaimFundsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketplaceClaimFunds)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketplaceClaimFunds)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketplaceClaimFundsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketplaceClaimFundsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketplaceClaimFunds represents a ClaimFunds event raised by the Marketplace contract.
type MarketplaceClaimFunds struct {
	User   common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterClaimFunds is a free log retrieval operation binding the contract event 0x4f0554190111f93f8c2ccef2cc41473f187d7f29ff5a5c308ca41f9dfe4e989a.
//
// Solidity: event ClaimFunds(address user, uint256 amount)
func (_Marketplace *MarketplaceFilterer) FilterClaimFunds(opts *bind.FilterOpts) (*MarketplaceClaimFundsIterator, error) {

	logs, sub, err := _Marketplace.contract.FilterLogs(opts, "ClaimFunds")
	if err != nil {
		return nil, err
	}
	return &MarketplaceClaimFundsIterator{contract: _Marketplace.contract, event: "ClaimFunds", logs: logs, sub: sub}, nil
}

// WatchClaimFunds is a free log subscription operation binding the contract event 0x4f0554190111f93f8c2ccef2cc41473f187d7f29ff5a5c308ca41f9dfe4e989a.
//
// Solidity: event ClaimFunds(address user, uint256 amount)
func (_Marketplace *MarketplaceFilterer) WatchClaimFunds(opts *bind.WatchOpts, sink chan<- *MarketplaceClaimFunds) (event.Subscription, error) {

	logs, sub, err := _Marketplace.contract.WatchLogs(opts, "ClaimFunds")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketplaceClaimFunds)
				if err := _Marketplace.contract.UnpackLog(event, "ClaimFunds", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimFunds is a log parse operation binding the contract event 0x4f0554190111f93f8c2ccef2cc41473f187d7f29ff5a5c308ca41f9dfe4e989a.
//
// Solidity: event ClaimFunds(address user, uint256 amount)
func (_Marketplace *MarketplaceFilterer) ParseClaimFunds(log types.Log) (*MarketplaceClaimFunds, error) {
	event := new(MarketplaceClaimFunds)
	if err := _Marketplace.contract.UnpackLog(event, "ClaimFunds", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketplaceCreateCollectibleIterator is returned from FilterCreateCollectible and is used to iterate over the raw logs and unpacked data for CreateCollectible events raised by the Marketplace contract.
type MarketplaceCreateCollectibleIterator struct {
	Event *MarketplaceCreateCollectible // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketplaceCreateCollectibleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketplaceCreateCollectible)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketplaceCreateCollectible)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketplaceCreateCollectibleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketplaceCreateCollectibleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketplaceCreateCollectible represents a CreateCollectible event raised by the Marketplace contract.
type MarketplaceCreateCollectible struct {
	Id           *big.Int
	CollectionId *big.Int
	TokenIds     []*big.Int
	Owners       []common.Address
	Creator      common.Address
	IsAuction    bool
	Price        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterCreateCollectible is a free log retrieval operation binding the contract event 0x90ee92f99f21443735ecc68007318c34c52aa3e851f4fc29ddaa3f2254d83b1e.
//
// Solidity: event CreateCollectible(uint256 id, uint256 collectionId, uint256[] tokenIds, address[] owners, address indexed creator, bool isAuction, uint256 price)
func (_Marketplace *MarketplaceFilterer) FilterCreateCollectible(opts *bind.FilterOpts, creator []common.Address) (*MarketplaceCreateCollectibleIterator, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _Marketplace.contract.FilterLogs(opts, "CreateCollectible", creatorRule)
	if err != nil {
		return nil, err
	}
	return &MarketplaceCreateCollectibleIterator{contract: _Marketplace.contract, event: "CreateCollectible", logs: logs, sub: sub}, nil
}

// WatchCreateCollectible is a free log subscription operation binding the contract event 0x90ee92f99f21443735ecc68007318c34c52aa3e851f4fc29ddaa3f2254d83b1e.
//
// Solidity: event CreateCollectible(uint256 id, uint256 collectionId, uint256[] tokenIds, address[] owners, address indexed creator, bool isAuction, uint256 price)
func (_Marketplace *MarketplaceFilterer) WatchCreateCollectible(opts *bind.WatchOpts, sink chan<- *MarketplaceCreateCollectible, creator []common.Address) (event.Subscription, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _Marketplace.contract.WatchLogs(opts, "CreateCollectible", creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketplaceCreateCollectible)
				if err := _Marketplace.contract.UnpackLog(event, "CreateCollectible", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateCollectible is a log parse operation binding the contract event 0x90ee92f99f21443735ecc68007318c34c52aa3e851f4fc29ddaa3f2254d83b1e.
//
// Solidity: event CreateCollectible(uint256 id, uint256 collectionId, uint256[] tokenIds, address[] owners, address indexed creator, bool isAuction, uint256 price)
func (_Marketplace *MarketplaceFilterer) ParseCreateCollectible(log types.Log) (*MarketplaceCreateCollectible, error) {
	event := new(MarketplaceCreateCollectible)
	if err := _Marketplace.contract.UnpackLog(event, "CreateCollectible", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketplaceCreateCollectionIterator is returned from FilterCreateCollection and is used to iterate over the raw logs and unpacked data for CreateCollection events raised by the Marketplace contract.
type MarketplaceCreateCollectionIterator struct {
	Event *MarketplaceCreateCollection // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketplaceCreateCollectionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketplaceCreateCollection)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketplaceCreateCollection)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketplaceCreateCollectionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketplaceCreateCollectionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketplaceCreateCollection represents a CreateCollection event raised by the Marketplace contract.
type MarketplaceCreateCollection struct {
	Id         *big.Int
	Name       string
	Symbol     string
	Fee        *big.Int
	MaxItems   *big.Int
	Collection common.Address
	Creator    common.Address
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCreateCollection is a free log retrieval operation binding the contract event 0xa7217fa6d312670524ba494cd4fe4649ba95a72936b4c34f1d3c9eceaee01922.
//
// Solidity: event CreateCollection(uint256 id, string name, string symbol, uint256 fee, uint256 maxItems, address indexed collection, address indexed creator, address indexed owner)
func (_Marketplace *MarketplaceFilterer) FilterCreateCollection(opts *bind.FilterOpts, collection []common.Address, creator []common.Address, owner []common.Address) (*MarketplaceCreateCollectionIterator, error) {

	var collectionRule []interface{}
	for _, collectionItem := range collection {
		collectionRule = append(collectionRule, collectionItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Marketplace.contract.FilterLogs(opts, "CreateCollection", collectionRule, creatorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MarketplaceCreateCollectionIterator{contract: _Marketplace.contract, event: "CreateCollection", logs: logs, sub: sub}, nil
}

// WatchCreateCollection is a free log subscription operation binding the contract event 0xa7217fa6d312670524ba494cd4fe4649ba95a72936b4c34f1d3c9eceaee01922.
//
// Solidity: event CreateCollection(uint256 id, string name, string symbol, uint256 fee, uint256 maxItems, address indexed collection, address indexed creator, address indexed owner)
func (_Marketplace *MarketplaceFilterer) WatchCreateCollection(opts *bind.WatchOpts, sink chan<- *MarketplaceCreateCollection, collection []common.Address, creator []common.Address, owner []common.Address) (event.Subscription, error) {

	var collectionRule []interface{}
	for _, collectionItem := range collection {
		collectionRule = append(collectionRule, collectionItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Marketplace.contract.WatchLogs(opts, "CreateCollection", collectionRule, creatorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketplaceCreateCollection)
				if err := _Marketplace.contract.UnpackLog(event, "CreateCollection", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateCollection is a log parse operation binding the contract event 0xa7217fa6d312670524ba494cd4fe4649ba95a72936b4c34f1d3c9eceaee01922.
//
// Solidity: event CreateCollection(uint256 id, string name, string symbol, uint256 fee, uint256 maxItems, address indexed collection, address indexed creator, address indexed owner)
func (_Marketplace *MarketplaceFilterer) ParseCreateCollection(log types.Log) (*MarketplaceCreateCollection, error) {
	event := new(MarketplaceCreateCollection)
	if err := _Marketplace.contract.UnpackLog(event, "CreateCollection", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketplaceEditCollectibleIterator is returned from FilterEditCollectible and is used to iterate over the raw logs and unpacked data for EditCollectible events raised by the Marketplace contract.
type MarketplaceEditCollectibleIterator struct {
	Event *MarketplaceEditCollectible // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketplaceEditCollectibleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketplaceEditCollectible)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketplaceEditCollectible)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketplaceEditCollectibleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketplaceEditCollectibleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketplaceEditCollectible represents a EditCollectible event raised by the Marketplace contract.
type MarketplaceEditCollectible struct {
	CollectionId  *big.Int
	CollectibleId *big.Int
	IsLocked      bool
	IsAuction     bool
	Owner         common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterEditCollectible is a free log retrieval operation binding the contract event 0xdb5b6a14075ccd1caa16a0ffe9eb0684c26975464ac963c47f77a9fc4f2ba173.
//
// Solidity: event EditCollectible(uint256 collectionId, uint256 collectibleId, bool isLocked, bool isAuction, address owner)
func (_Marketplace *MarketplaceFilterer) FilterEditCollectible(opts *bind.FilterOpts) (*MarketplaceEditCollectibleIterator, error) {

	logs, sub, err := _Marketplace.contract.FilterLogs(opts, "EditCollectible")
	if err != nil {
		return nil, err
	}
	return &MarketplaceEditCollectibleIterator{contract: _Marketplace.contract, event: "EditCollectible", logs: logs, sub: sub}, nil
}

// WatchEditCollectible is a free log subscription operation binding the contract event 0xdb5b6a14075ccd1caa16a0ffe9eb0684c26975464ac963c47f77a9fc4f2ba173.
//
// Solidity: event EditCollectible(uint256 collectionId, uint256 collectibleId, bool isLocked, bool isAuction, address owner)
func (_Marketplace *MarketplaceFilterer) WatchEditCollectible(opts *bind.WatchOpts, sink chan<- *MarketplaceEditCollectible) (event.Subscription, error) {

	logs, sub, err := _Marketplace.contract.WatchLogs(opts, "EditCollectible")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketplaceEditCollectible)
				if err := _Marketplace.contract.UnpackLog(event, "EditCollectible", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditCollectible is a log parse operation binding the contract event 0xdb5b6a14075ccd1caa16a0ffe9eb0684c26975464ac963c47f77a9fc4f2ba173.
//
// Solidity: event EditCollectible(uint256 collectionId, uint256 collectibleId, bool isLocked, bool isAuction, address owner)
func (_Marketplace *MarketplaceFilterer) ParseEditCollectible(log types.Log) (*MarketplaceEditCollectible, error) {
	event := new(MarketplaceEditCollectible)
	if err := _Marketplace.contract.UnpackLog(event, "EditCollectible", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketplaceEditCollectionIterator is returned from FilterEditCollection and is used to iterate over the raw logs and unpacked data for EditCollection events raised by the Marketplace contract.
type MarketplaceEditCollectionIterator struct {
	Event *MarketplaceEditCollection // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketplaceEditCollectionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketplaceEditCollection)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketplaceEditCollection)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketplaceEditCollectionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketplaceEditCollectionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketplaceEditCollection represents a EditCollection event raised by the Marketplace contract.
type MarketplaceEditCollection struct {
	Id         *big.Int
	Name       string
	Symbol     string
	Fee        *big.Int
	MaxItems   *big.Int
	Collection common.Address
	Creator    common.Address
	Owner      common.Address
	IsApproved bool
	IsLocked   bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterEditCollection is a free log retrieval operation binding the contract event 0x7bab18a3dc1feb101f1f7ee8fc6ef12c98ab8c729af16c4b2505f80e2ffa3114.
//
// Solidity: event EditCollection(uint256 id, string name, string symbol, uint256 fee, uint256 maxItems, address indexed collection, address indexed creator, address indexed owner, bool isApproved, bool isLocked)
func (_Marketplace *MarketplaceFilterer) FilterEditCollection(opts *bind.FilterOpts, collection []common.Address, creator []common.Address, owner []common.Address) (*MarketplaceEditCollectionIterator, error) {

	var collectionRule []interface{}
	for _, collectionItem := range collection {
		collectionRule = append(collectionRule, collectionItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Marketplace.contract.FilterLogs(opts, "EditCollection", collectionRule, creatorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MarketplaceEditCollectionIterator{contract: _Marketplace.contract, event: "EditCollection", logs: logs, sub: sub}, nil
}

// WatchEditCollection is a free log subscription operation binding the contract event 0x7bab18a3dc1feb101f1f7ee8fc6ef12c98ab8c729af16c4b2505f80e2ffa3114.
//
// Solidity: event EditCollection(uint256 id, string name, string symbol, uint256 fee, uint256 maxItems, address indexed collection, address indexed creator, address indexed owner, bool isApproved, bool isLocked)
func (_Marketplace *MarketplaceFilterer) WatchEditCollection(opts *bind.WatchOpts, sink chan<- *MarketplaceEditCollection, collection []common.Address, creator []common.Address, owner []common.Address) (event.Subscription, error) {

	var collectionRule []interface{}
	for _, collectionItem := range collection {
		collectionRule = append(collectionRule, collectionItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Marketplace.contract.WatchLogs(opts, "EditCollection", collectionRule, creatorRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketplaceEditCollection)
				if err := _Marketplace.contract.UnpackLog(event, "EditCollection", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEditCollection is a log parse operation binding the contract event 0x7bab18a3dc1feb101f1f7ee8fc6ef12c98ab8c729af16c4b2505f80e2ffa3114.
//
// Solidity: event EditCollection(uint256 id, string name, string symbol, uint256 fee, uint256 maxItems, address indexed collection, address indexed creator, address indexed owner, bool isApproved, bool isLocked)
func (_Marketplace *MarketplaceFilterer) ParseEditCollection(log types.Log) (*MarketplaceEditCollection, error) {
	event := new(MarketplaceEditCollection)
	if err := _Marketplace.contract.UnpackLog(event, "EditCollection", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MarketplaceSellIterator is returned from FilterSell and is used to iterate over the raw logs and unpacked data for Sell events raised by the Marketplace contract.
type MarketplaceSellIterator struct {
	Event *MarketplaceSell // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MarketplaceSellIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MarketplaceSell)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MarketplaceSell)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MarketplaceSellIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MarketplaceSellIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MarketplaceSell represents a Sell event raised by the Marketplace contract.
type MarketplaceSell struct {
	Id           *big.Int
	CollectionId *big.Int
	TokenIds     []*big.Int
	Creator      common.Address
	Seller       common.Address
	Quantity     *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSell is a free log retrieval operation binding the contract event 0x2261292e5f83b9170492ed43134e451136c943134b649673be882c18582dcbf7.
//
// Solidity: event Sell(uint256 id, uint256 collectionId, uint256[] tokenIds, address indexed creator, address indexed seller, uint256 quantity)
func (_Marketplace *MarketplaceFilterer) FilterSell(opts *bind.FilterOpts, creator []common.Address, seller []common.Address) (*MarketplaceSellIterator, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}

	logs, sub, err := _Marketplace.contract.FilterLogs(opts, "Sell", creatorRule, sellerRule)
	if err != nil {
		return nil, err
	}
	return &MarketplaceSellIterator{contract: _Marketplace.contract, event: "Sell", logs: logs, sub: sub}, nil
}

// WatchSell is a free log subscription operation binding the contract event 0x2261292e5f83b9170492ed43134e451136c943134b649673be882c18582dcbf7.
//
// Solidity: event Sell(uint256 id, uint256 collectionId, uint256[] tokenIds, address indexed creator, address indexed seller, uint256 quantity)
func (_Marketplace *MarketplaceFilterer) WatchSell(opts *bind.WatchOpts, sink chan<- *MarketplaceSell, creator []common.Address, seller []common.Address) (event.Subscription, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}

	logs, sub, err := _Marketplace.contract.WatchLogs(opts, "Sell", creatorRule, sellerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MarketplaceSell)
				if err := _Marketplace.contract.UnpackLog(event, "Sell", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSell is a log parse operation binding the contract event 0x2261292e5f83b9170492ed43134e451136c943134b649673be882c18582dcbf7.
//
// Solidity: event Sell(uint256 id, uint256 collectionId, uint256[] tokenIds, address indexed creator, address indexed seller, uint256 quantity)
func (_Marketplace *MarketplaceFilterer) ParseSell(log types.Log) (*MarketplaceSell, error) {
	event := new(MarketplaceSell)
	if err := _Marketplace.contract.UnpackLog(event, "Sell", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
