// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package collection

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NFTCollectionMetaData contains all meta data concerning the NFTCollection contract.
var NFTCollectionMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50604051613c89380380613c89833981810160405281019061003291906101d2565b81818160009081610043919061046b565b508060019081610053919061046b565b505050505061053d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100c48261007b565b810181811067ffffffffffffffff821117156100e3576100e261008c565b5b80604052505050565b60006100f661005d565b905061010282826100bb565b919050565b600067ffffffffffffffff8211156101225761012161008c565b5b61012b8261007b565b9050602081019050919050565b60005b8381101561015657808201518184015260208101905061013b565b60008484015250505050565b600061017561017084610107565b6100ec565b90508281526020810184848401111561019157610190610076565b5b61019c848285610138565b509392505050565b600082601f8301126101b9576101b8610071565b5b81516101c9848260208601610162565b91505092915050565b600080604083850312156101e9576101e8610067565b5b600083015167ffffffffffffffff8111156102075761020661006c565b5b610213858286016101a4565b925050602083015167ffffffffffffffff8111156102345761023361006c565b5b610240858286016101a4565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061029c57607f821691505b6020821081036102af576102ae610255565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103177fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102da565b61032186836102da565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061036861036361035e84610339565b610343565b610339565b9050919050565b6000819050919050565b6103828361034d565b61039661038e8261036f565b8484546102e7565b825550505050565b600090565b6103ab61039e565b6103b6818484610379565b505050565b5b818110156103da576103cf6000826103a3565b6001810190506103bc565b5050565b601f82111561041f576103f0816102b5565b6103f9846102ca565b81016020851015610408578190505b61041c610414856102ca565b8301826103bb565b50505b505050565b600082821c905092915050565b600061044260001984600802610424565b1980831691505092915050565b600061045b8383610431565b9150826002028217905092915050565b6104748261024a565b67ffffffffffffffff81111561048d5761048c61008c565b5b6104978254610284565b6104a28282856103de565b600060209050601f8311600181146104d557600084156104c3578287015190505b6104cd858261044f565b865550610535565b601f1984166104e3866102b5565b60005b8281101561050b578489015182556001820191506020850194506020810190506104e6565b868310156105285784890151610524601f891682610431565b8355505b6001600288020188555050505b505050505050565b61373d8061054c6000396000f3fe6080604052600436106101145760003560e01c80634f6ccce7116100a057806395d89b411161006457806395d89b41146103da578063a22cb46514610405578063b88d4fde1461042e578063c87b56dd14610457578063e985e9c51461049457610114565b80634f6ccce7146102bd5780636352211e146102fa578063695850fb146103375780636c8b703f1461036057806370a082311461039d57610114565b8063095ea7b3116100e7578063095ea7b3146101da57806318160ddd1461020357806323b872dd1461022e5780632f745c591461025757806342842e0e1461029457610114565b806301ffc9a714610119578063056b01ce1461015657806306fdde0314610172578063081812fc1461019d575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b919061229c565b6104d1565b60405161014d91906122e4565b60405180910390f35b610170600480360381019061016b919061247b565b6104e3565b005b34801561017e57600080fd5b50610187610666565b6040516101949190612556565b60405180910390f35b3480156101a957600080fd5b506101c460048036038101906101bf9190612578565b6106f8565b6040516101d191906125e6565b60405180910390f35b3480156101e657600080fd5b5061020160048036038101906101fc919061262d565b61073e565b005b34801561020f57600080fd5b50610218610855565b604051610225919061267c565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190612697565b610862565b005b34801561026357600080fd5b5061027e6004803603810190610279919061262d565b6108c2565b60405161028b919061267c565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b69190612697565b610967565b005b3480156102c957600080fd5b506102e460048036038101906102df9190612578565b610987565b6040516102f1919061267c565b60405180910390f35b34801561030657600080fd5b50610321600480360381019061031c9190612578565b6109f8565b60405161032e91906125e6565b60405180910390f35b34801561034357600080fd5b5061035e600480360381019061035991906126ea565b610a7e565b005b34801561036c57600080fd5b5061038760048036038101906103829190612578565b610ba4565b6040516103949190612556565b60405180910390f35b3480156103a957600080fd5b506103c460048036038101906103bf9190612733565b610c50565b6040516103d1919061267c565b60405180910390f35b3480156103e657600080fd5b506103ef610d07565b6040516103fc9190612556565b60405180910390f35b34801561041157600080fd5b5061042c6004803603810190610427919061278c565b610d99565b005b34801561043a57600080fd5b506104556004803603810190610450919061286d565b610daf565b005b34801561046357600080fd5b5061047e60048036038101906104799190612578565b610e11565b60405161048b9190612556565b60405180910390f35b3480156104a057600080fd5b506104bb60048036038101906104b691906128f0565b610efe565b6040516104c891906122e4565b60405180910390f35b60006104dc82610f92565b9050919050565b600b826040516104f3919061296c565b908152602001604051809103902060009054906101000a900460ff161561054f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610546906129cf565b60405180910390fd5b60008111610592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058990612a3b565b60405180910390fd5b60005b818110156105f55760006105ba60016105ac610855565b61100c90919063ffffffff16565b905083600c600083815260200190815260200160002090816105dc9190612c67565b506105e73382611022565b508080600101915050610595565b50600a8290806001815401808255809150506001900390600052602060002001600090919091909150908161062a9190612c67565b506001600b8360405161063d919061296c565b908152602001604051809103902060006101000a81548160ff0219169083151502179055505050565b60606000805461067590612a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546106a190612a8a565b80156106ee5780601f106106c3576101008083540402835291602001916106ee565b820191906000526020600020905b8154815290600101906020018083116106d157829003601f168201915b5050505050905090565b600061070382611040565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610749826109f8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b090612dab565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107d861108b565b73ffffffffffffffffffffffffffffffffffffffff16148061080757506108068161080161108b565b610efe565b5b610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d90612e3d565b60405180910390fd5b6108508383611093565b505050565b6000600880549050905090565b61087361086d61108b565b8261114c565b6108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a990612ecf565b60405180910390fd5b6108bd8383836111e1565b505050565b60006108cd83610c50565b821061090e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090590612f61565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61098283838360405180602001604052806000815250610daf565b505050565b6000610991610855565b82106109d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c990612ff3565b60405180910390fd5b600882815481106109e6576109e5613013565b5b90600052602060002001549050919050565b600080610a04836114da565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c9061308e565b60405180910390fd5b80915050919050565b600b81604051610a8e919061296c565b908152602001604051809103902060009054906101000a900460ff1615610aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae1906129cf565b60405180910390fd5b600a81908060018154018082558091505060019003906000526020600020016000909190919091509081610b1e9190612c67565b506000610b3c6001610b2e610855565b61100c90919063ffffffff16565b905081600c60008381526020019081526020016000209081610b5e9190612c67565b50610b693382611022565b6001600b83604051610b7b919061296c565b908152602001604051809103902060006101000a81548160ff0219169083151502179055505050565b600a8181548110610bb457600080fd5b906000526020600020016000915090508054610bcf90612a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfb90612a8a565b8015610c485780601f10610c1d57610100808354040283529160200191610c48565b820191906000526020600020905b815481529060010190602001808311610c2b57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb790613120565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610d1690612a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4290612a8a565b8015610d8f5780601f10610d6457610100808354040283529160200191610d8f565b820191906000526020600020905b815481529060010190602001808311610d7257829003601f168201915b5050505050905090565b610dab610da461108b565b8383611517565b5050565b610dc0610dba61108b565b8361114c565b610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690612ecf565b60405180910390fd5b610e0b84848484611683565b50505050565b6060610e1c826116df565b610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e52906131b2565b60405180910390fd5b600c60008381526020019081526020016000208054610e7990612a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea590612a8a565b8015610ef25780601f10610ec757610100808354040283529160200191610ef2565b820191906000526020600020905b815481529060010190602001808311610ed557829003601f168201915b50505050509050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611005575061100482611720565b5b9050919050565b6000818361101a9190613201565b905092915050565b61103c828260405180602001604052806000815250611802565b5050565b611049816116df565b611088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107f9061308e565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611106836109f8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611158836109f8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061119a57506111998185610efe565b5b806111d857508373ffffffffffffffffffffffffffffffffffffffff166111c0846106f8565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611201826109f8565b73ffffffffffffffffffffffffffffffffffffffff1614611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124e906132a7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bd90613339565b60405180910390fd5b6112d3838383600161185d565b8273ffffffffffffffffffffffffffffffffffffffff166112f3826109f8565b73ffffffffffffffffffffffffffffffffffffffff1614611349576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611340906132a7565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114d5838383600161186f565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157c906133a5565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161167691906122e4565b60405180910390a3505050565b61168e8484846111e1565b61169a84848484611875565b6116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d090613437565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff16611701836114da565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806117eb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806117fb57506117fa826119fc565b5b9050919050565b61180c8383611a66565b6118196000848484611875565b611858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184f90613437565b60405180910390fd5b505050565b61186984848484611c83565b50505050565b50505050565b60006118968473ffffffffffffffffffffffffffffffffffffffff16611de1565b156119ef578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026118bf61108b565b8786866040518563ffffffff1660e01b81526004016118e194939291906134ac565b6020604051808303816000875af192505050801561191d57506040513d601f19601f8201168201806040525081019061191a919061350d565b60015b61199f573d806000811461194d576040519150601f19603f3d011682016040523d82523d6000602084013e611952565b606091505b506000815103611997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198e90613437565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119f4565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acc90613586565b60405180910390fd5b611ade816116df565b15611b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b15906135f2565b60405180910390fd5b611b2c60008383600161185d565b611b35816116df565b15611b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6c906135f2565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611c7f60008383600161186f565b5050565b611c8f84848484611e04565b6001811115611cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cca90613684565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611d1a57611d1581611f2a565b611d59565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611d5857611d578582611f73565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611d9b57611d96816120e0565b611dda565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611dd957611dd884826121b1565b5b5b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6001811115611f2457600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611e985780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e9091906136a4565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611f235780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f1b9190613201565b925050819055505b5b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001611f8084610c50565b611f8a91906136a4565b905060006007600084815260200190815260200160002054905081811461206f576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506120f491906136a4565b905060006009600084815260200190815260200160002054905060006008838154811061212457612123613013565b5b90600052602060002001549050806008838154811061214657612145613013565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612195576121946136d8565b5b6001900381819060005260206000200160009055905550505050565b60006121bc83610c50565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61227981612244565b811461228457600080fd5b50565b60008135905061229681612270565b92915050565b6000602082840312156122b2576122b161223a565b5b60006122c084828501612287565b91505092915050565b60008115159050919050565b6122de816122c9565b82525050565b60006020820190506122f960008301846122d5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61235282612309565b810181811067ffffffffffffffff821117156123715761237061231a565b5b80604052505050565b6000612384612230565b90506123908282612349565b919050565b600067ffffffffffffffff8211156123b0576123af61231a565b5b6123b982612309565b9050602081019050919050565b82818337600083830152505050565b60006123e86123e384612395565b61237a565b90508281526020810184848401111561240457612403612304565b5b61240f8482856123c6565b509392505050565b600082601f83011261242c5761242b6122ff565b5b813561243c8482602086016123d5565b91505092915050565b6000819050919050565b61245881612445565b811461246357600080fd5b50565b6000813590506124758161244f565b92915050565b600080604083850312156124925761249161223a565b5b600083013567ffffffffffffffff8111156124b0576124af61223f565b5b6124bc85828601612417565b92505060206124cd85828601612466565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125115780820151818401526020810190506124f6565b60008484015250505050565b6000612528826124d7565b61253281856124e2565b93506125428185602086016124f3565b61254b81612309565b840191505092915050565b60006020820190508181036000830152612570818461251d565b905092915050565b60006020828403121561258e5761258d61223a565b5b600061259c84828501612466565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125d0826125a5565b9050919050565b6125e0816125c5565b82525050565b60006020820190506125fb60008301846125d7565b92915050565b61260a816125c5565b811461261557600080fd5b50565b60008135905061262781612601565b92915050565b600080604083850312156126445761264361223a565b5b600061265285828601612618565b925050602061266385828601612466565b9150509250929050565b61267681612445565b82525050565b6000602082019050612691600083018461266d565b92915050565b6000806000606084860312156126b0576126af61223a565b5b60006126be86828701612618565b93505060206126cf86828701612618565b92505060406126e086828701612466565b9150509250925092565b600060208284031215612700576126ff61223a565b5b600082013567ffffffffffffffff81111561271e5761271d61223f565b5b61272a84828501612417565b91505092915050565b6000602082840312156127495761274861223a565b5b600061275784828501612618565b91505092915050565b612769816122c9565b811461277457600080fd5b50565b60008135905061278681612760565b92915050565b600080604083850312156127a3576127a261223a565b5b60006127b185828601612618565b92505060206127c285828601612777565b9150509250929050565b600067ffffffffffffffff8211156127e7576127e661231a565b5b6127f082612309565b9050602081019050919050565b600061281061280b846127cc565b61237a565b90508281526020810184848401111561282c5761282b612304565b5b6128378482856123c6565b509392505050565b600082601f830112612854576128536122ff565b5b81356128648482602086016127fd565b91505092915050565b600080600080608085870312156128875761288661223a565b5b600061289587828801612618565b94505060206128a687828801612618565b93505060406128b787828801612466565b925050606085013567ffffffffffffffff8111156128d8576128d761223f565b5b6128e48782880161283f565b91505092959194509250565b600080604083850312156129075761290661223a565b5b600061291585828601612618565b925050602061292685828601612618565b9150509250929050565b600081905092915050565b6000612946826124d7565b6129508185612930565b93506129608185602086016124f3565b80840191505092915050565b6000612978828461293b565b915081905092915050565b7f54686520746f6b656e205552492073686f756c6420626520756e697175650000600082015250565b60006129b9601e836124e2565b91506129c482612983565b602082019050919050565b600060208201905081810360008301526129e8816129ac565b9050919050565b7f7175616e746974792063616e6e6f742062652030000000000000000000000000600082015250565b6000612a256014836124e2565b9150612a30826129ef565b602082019050919050565b60006020820190508181036000830152612a5481612a18565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aa257607f821691505b602082108103612ab557612ab4612a5b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612b1d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612ae0565b612b278683612ae0565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612b64612b5f612b5a84612445565b612b3f565b612445565b9050919050565b6000819050919050565b612b7e83612b49565b612b92612b8a82612b6b565b848454612aed565b825550505050565b600090565b612ba7612b9a565b612bb2818484612b75565b505050565b5b81811015612bd657612bcb600082612b9f565b600181019050612bb8565b5050565b601f821115612c1b57612bec81612abb565b612bf584612ad0565b81016020851015612c04578190505b612c18612c1085612ad0565b830182612bb7565b50505b505050565b600082821c905092915050565b6000612c3e60001984600802612c20565b1980831691505092915050565b6000612c578383612c2d565b9150826002028217905092915050565b612c70826124d7565b67ffffffffffffffff811115612c8957612c8861231a565b5b612c938254612a8a565b612c9e828285612bda565b600060209050601f831160018114612cd15760008415612cbf578287015190505b612cc98582612c4b565b865550612d31565b601f198416612cdf86612abb565b60005b82811015612d0757848901518255600182019150602085019450602081019050612ce2565b86831015612d245784890151612d20601f891682612c2d565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d956021836124e2565b9150612da082612d39565b604082019050919050565b60006020820190508181036000830152612dc481612d88565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612e27603d836124e2565b9150612e3282612dcb565b604082019050919050565b60006020820190508181036000830152612e5681612e1a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612eb9602d836124e2565b9150612ec482612e5d565b604082019050919050565b60006020820190508181036000830152612ee881612eac565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000612f4b602b836124e2565b9150612f5682612eef565b604082019050919050565b60006020820190508181036000830152612f7a81612f3e565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000612fdd602c836124e2565b9150612fe882612f81565b604082019050919050565b6000602082019050818103600083015261300c81612fd0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006130786018836124e2565b915061308382613042565b602082019050919050565b600060208201905081810360008301526130a78161306b565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061310a6029836124e2565b9150613115826130ae565b604082019050919050565b60006020820190508181036000830152613139816130fd565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061319c602f836124e2565b91506131a782613140565b604082019050919050565b600060208201905081810360008301526131cb8161318f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061320c82612445565b915061321783612445565b925082820190508082111561322f5761322e6131d2565b5b92915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006132916025836124e2565b915061329c82613235565b604082019050919050565b600060208201905081810360008301526132c081613284565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006133236024836124e2565b915061332e826132c7565b604082019050919050565b6000602082019050818103600083015261335281613316565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061338f6019836124e2565b915061339a82613359565b602082019050919050565b600060208201905081810360008301526133be81613382565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006134216032836124e2565b915061342c826133c5565b604082019050919050565b6000602082019050818103600083015261345081613414565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061347e82613457565b6134888185613462565b93506134988185602086016124f3565b6134a181612309565b840191505092915050565b60006080820190506134c160008301876125d7565b6134ce60208301866125d7565b6134db604083018561266d565b81810360608301526134ed8184613473565b905095945050505050565b60008151905061350781612270565b92915050565b6000602082840312156135235761352261223a565b5b6000613531848285016134f8565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006135706020836124e2565b915061357b8261353a565b602082019050919050565b6000602082019050818103600083015261359f81613563565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006135dc601c836124e2565b91506135e7826135a6565b602082019050919050565b6000602082019050818103600083015261360b816135cf565b9050919050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b600061366e6035836124e2565b915061367982613612565b604082019050919050565b6000602082019050818103600083015261369d81613661565b9050919050565b60006136af82612445565b91506136ba83612445565b92508282039050818111156136d2576136d16131d2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220bd979e459b17bd3099568bcf18c89c920029b98c3acf6644572b1dd50aaf4db064736f6c634300081c0033",
}

// NFTCollectionABI is the input ABI used to generate the binding from.
// Deprecated: Use NFTCollectionMetaData.ABI instead.
var NFTCollectionABI = NFTCollectionMetaData.ABI

// NFTCollectionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NFTCollectionMetaData.Bin instead.
var NFTCollectionBin = NFTCollectionMetaData.Bin

// DeployNFTCollection deploys a new Ethereum contract, binding an instance of NFTCollection to it.
func DeployNFTCollection(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string) (common.Address, *types.Transaction, *NFTCollection, error) {
	parsed, err := NFTCollectionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NFTCollectionBin), backend, _name, _symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NFTCollection{NFTCollectionCaller: NFTCollectionCaller{contract: contract}, NFTCollectionTransactor: NFTCollectionTransactor{contract: contract}, NFTCollectionFilterer: NFTCollectionFilterer{contract: contract}}, nil
}

// NFTCollection is an auto generated Go binding around an Ethereum contract.
type NFTCollection struct {
	NFTCollectionCaller     // Read-only binding to the contract
	NFTCollectionTransactor // Write-only binding to the contract
	NFTCollectionFilterer   // Log filterer for contract events
}

// NFTCollectionCaller is an auto generated read-only Go binding around an Ethereum contract.
type NFTCollectionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTCollectionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NFTCollectionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTCollectionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NFTCollectionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTCollectionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NFTCollectionSession struct {
	Contract     *NFTCollection    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NFTCollectionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NFTCollectionCallerSession struct {
	Contract *NFTCollectionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// NFTCollectionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NFTCollectionTransactorSession struct {
	Contract     *NFTCollectionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// NFTCollectionRaw is an auto generated low-level Go binding around an Ethereum contract.
type NFTCollectionRaw struct {
	Contract *NFTCollection // Generic contract binding to access the raw methods on
}

// NFTCollectionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NFTCollectionCallerRaw struct {
	Contract *NFTCollectionCaller // Generic read-only contract binding to access the raw methods on
}

// NFTCollectionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NFTCollectionTransactorRaw struct {
	Contract *NFTCollectionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNFTCollection creates a new instance of NFTCollection, bound to a specific deployed contract.
func NewNFTCollection(address common.Address, backend bind.ContractBackend) (*NFTCollection, error) {
	contract, err := bindNFTCollection(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NFTCollection{NFTCollectionCaller: NFTCollectionCaller{contract: contract}, NFTCollectionTransactor: NFTCollectionTransactor{contract: contract}, NFTCollectionFilterer: NFTCollectionFilterer{contract: contract}}, nil
}

// NewNFTCollectionCaller creates a new read-only instance of NFTCollection, bound to a specific deployed contract.
func NewNFTCollectionCaller(address common.Address, caller bind.ContractCaller) (*NFTCollectionCaller, error) {
	contract, err := bindNFTCollection(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NFTCollectionCaller{contract: contract}, nil
}

// NewNFTCollectionTransactor creates a new write-only instance of NFTCollection, bound to a specific deployed contract.
func NewNFTCollectionTransactor(address common.Address, transactor bind.ContractTransactor) (*NFTCollectionTransactor, error) {
	contract, err := bindNFTCollection(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NFTCollectionTransactor{contract: contract}, nil
}

// NewNFTCollectionFilterer creates a new log filterer instance of NFTCollection, bound to a specific deployed contract.
func NewNFTCollectionFilterer(address common.Address, filterer bind.ContractFilterer) (*NFTCollectionFilterer, error) {
	contract, err := bindNFTCollection(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NFTCollectionFilterer{contract: contract}, nil
}

// bindNFTCollection binds a generic wrapper to an already deployed contract.
func bindNFTCollection(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NFTCollectionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NFTCollection *NFTCollectionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NFTCollection.Contract.NFTCollectionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NFTCollection *NFTCollectionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTCollection.Contract.NFTCollectionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NFTCollection *NFTCollectionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NFTCollection.Contract.NFTCollectionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NFTCollection *NFTCollectionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NFTCollection.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NFTCollection *NFTCollectionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTCollection.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NFTCollection *NFTCollectionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NFTCollection.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NFTCollection *NFTCollectionCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NFTCollection *NFTCollectionSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NFTCollection.Contract.BalanceOf(&_NFTCollection.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NFTCollection *NFTCollectionCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NFTCollection.Contract.BalanceOf(&_NFTCollection.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NFTCollection *NFTCollectionCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NFTCollection *NFTCollectionSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NFTCollection.Contract.GetApproved(&_NFTCollection.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NFTCollection *NFTCollectionCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NFTCollection.Contract.GetApproved(&_NFTCollection.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NFTCollection *NFTCollectionCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NFTCollection *NFTCollectionSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NFTCollection.Contract.IsApprovedForAll(&_NFTCollection.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NFTCollection *NFTCollectionCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NFTCollection.Contract.IsApprovedForAll(&_NFTCollection.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NFTCollection *NFTCollectionCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NFTCollection *NFTCollectionSession) Name() (string, error) {
	return _NFTCollection.Contract.Name(&_NFTCollection.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NFTCollection *NFTCollectionCallerSession) Name() (string, error) {
	return _NFTCollection.Contract.Name(&_NFTCollection.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NFTCollection *NFTCollectionCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NFTCollection *NFTCollectionSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NFTCollection.Contract.OwnerOf(&_NFTCollection.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NFTCollection *NFTCollectionCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NFTCollection.Contract.OwnerOf(&_NFTCollection.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NFTCollection *NFTCollectionCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NFTCollection *NFTCollectionSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NFTCollection.Contract.SupportsInterface(&_NFTCollection.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NFTCollection *NFTCollectionCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NFTCollection.Contract.SupportsInterface(&_NFTCollection.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NFTCollection *NFTCollectionCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NFTCollection *NFTCollectionSession) Symbol() (string, error) {
	return _NFTCollection.Contract.Symbol(&_NFTCollection.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NFTCollection *NFTCollectionCallerSession) Symbol() (string, error) {
	return _NFTCollection.Contract.Symbol(&_NFTCollection.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NFTCollection *NFTCollectionCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NFTCollection *NFTCollectionSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _NFTCollection.Contract.TokenByIndex(&_NFTCollection.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NFTCollection *NFTCollectionCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _NFTCollection.Contract.TokenByIndex(&_NFTCollection.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NFTCollection *NFTCollectionCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NFTCollection *NFTCollectionSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _NFTCollection.Contract.TokenOfOwnerByIndex(&_NFTCollection.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NFTCollection *NFTCollectionCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _NFTCollection.Contract.TokenOfOwnerByIndex(&_NFTCollection.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NFTCollection *NFTCollectionCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NFTCollection *NFTCollectionSession) TokenURI(tokenId *big.Int) (string, error) {
	return _NFTCollection.Contract.TokenURI(&_NFTCollection.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NFTCollection *NFTCollectionCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _NFTCollection.Contract.TokenURI(&_NFTCollection.CallOpts, tokenId)
}

// TokenURIs is a free data retrieval call binding the contract method 0x6c8b703f.
//
// Solidity: function tokenURIs(uint256 ) view returns(string)
func (_NFTCollection *NFTCollectionCaller) TokenURIs(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "tokenURIs", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURIs is a free data retrieval call binding the contract method 0x6c8b703f.
//
// Solidity: function tokenURIs(uint256 ) view returns(string)
func (_NFTCollection *NFTCollectionSession) TokenURIs(arg0 *big.Int) (string, error) {
	return _NFTCollection.Contract.TokenURIs(&_NFTCollection.CallOpts, arg0)
}

// TokenURIs is a free data retrieval call binding the contract method 0x6c8b703f.
//
// Solidity: function tokenURIs(uint256 ) view returns(string)
func (_NFTCollection *NFTCollectionCallerSession) TokenURIs(arg0 *big.Int) (string, error) {
	return _NFTCollection.Contract.TokenURIs(&_NFTCollection.CallOpts, arg0)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NFTCollection *NFTCollectionCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NFTCollection.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NFTCollection *NFTCollectionSession) TotalSupply() (*big.Int, error) {
	return _NFTCollection.Contract.TotalSupply(&_NFTCollection.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NFTCollection *NFTCollectionCallerSession) TotalSupply() (*big.Int, error) {
	return _NFTCollection.Contract.TotalSupply(&_NFTCollection.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.Approve(&_NFTCollection.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.Approve(&_NFTCollection.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x056b01ce.
//
// Solidity: function mint(string _tokenURI, uint256 _quantity) payable returns()
func (_NFTCollection *NFTCollectionTransactor) Mint(opts *bind.TransactOpts, _tokenURI string, _quantity *big.Int) (*types.Transaction, error) {
	return _NFTCollection.contract.Transact(opts, "mint", _tokenURI, _quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x056b01ce.
//
// Solidity: function mint(string _tokenURI, uint256 _quantity) payable returns()
func (_NFTCollection *NFTCollectionSession) Mint(_tokenURI string, _quantity *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.Mint(&_NFTCollection.TransactOpts, _tokenURI, _quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x056b01ce.
//
// Solidity: function mint(string _tokenURI, uint256 _quantity) payable returns()
func (_NFTCollection *NFTCollectionTransactorSession) Mint(_tokenURI string, _quantity *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.Mint(&_NFTCollection.TransactOpts, _tokenURI, _quantity)
}

// SafeMint is a paid mutator transaction binding the contract method 0x695850fb.
//
// Solidity: function safeMint(string _tokenURI) returns()
func (_NFTCollection *NFTCollectionTransactor) SafeMint(opts *bind.TransactOpts, _tokenURI string) (*types.Transaction, error) {
	return _NFTCollection.contract.Transact(opts, "safeMint", _tokenURI)
}

// SafeMint is a paid mutator transaction binding the contract method 0x695850fb.
//
// Solidity: function safeMint(string _tokenURI) returns()
func (_NFTCollection *NFTCollectionSession) SafeMint(_tokenURI string) (*types.Transaction, error) {
	return _NFTCollection.Contract.SafeMint(&_NFTCollection.TransactOpts, _tokenURI)
}

// SafeMint is a paid mutator transaction binding the contract method 0x695850fb.
//
// Solidity: function safeMint(string _tokenURI) returns()
func (_NFTCollection *NFTCollectionTransactorSession) SafeMint(_tokenURI string) (*types.Transaction, error) {
	return _NFTCollection.Contract.SafeMint(&_NFTCollection.TransactOpts, _tokenURI)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.SafeTransferFrom(&_NFTCollection.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.SafeTransferFrom(&_NFTCollection.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_NFTCollection *NFTCollectionTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _NFTCollection.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_NFTCollection *NFTCollectionSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _NFTCollection.Contract.SafeTransferFrom0(&_NFTCollection.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_NFTCollection *NFTCollectionTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _NFTCollection.Contract.SafeTransferFrom0(&_NFTCollection.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NFTCollection *NFTCollectionTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _NFTCollection.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NFTCollection *NFTCollectionSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NFTCollection.Contract.SetApprovalForAll(&_NFTCollection.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NFTCollection *NFTCollectionTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NFTCollection.Contract.SetApprovalForAll(&_NFTCollection.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.TransferFrom(&_NFTCollection.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NFTCollection *NFTCollectionTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTCollection.Contract.TransferFrom(&_NFTCollection.TransactOpts, from, to, tokenId)
}

// NFTCollectionApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the NFTCollection contract.
type NFTCollectionApprovalIterator struct {
	sub      ethereum.Subscription
	fail     error
	Event    *NFTCollectionApproval
	contract *bind.BoundContract
	logs     chan types.Log
	event    string
	done     bool
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTCollectionApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTCollectionApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTCollectionApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTCollectionApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTCollectionApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTCollectionApproval represents a Approval event raised by the NFTCollection contract.
type NFTCollectionApproval struct {
	TokenId  *big.Int
	Raw      types.Log
	Owner    common.Address
	Approved common.Address
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NFTCollection *NFTCollectionFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*NFTCollectionApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NFTCollection.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NFTCollectionApprovalIterator{contract: _NFTCollection.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NFTCollection *NFTCollectionFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *NFTCollectionApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NFTCollection.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTCollectionApproval)
				if err := _NFTCollection.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NFTCollection *NFTCollectionFilterer) ParseApproval(log types.Log) (*NFTCollectionApproval, error) {
	event := new(NFTCollectionApproval)
	if err := _NFTCollection.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NFTCollectionApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the NFTCollection contract.
type NFTCollectionApprovalForAllIterator struct {
	sub      ethereum.Subscription
	fail     error
	Event    *NFTCollectionApprovalForAll
	contract *bind.BoundContract
	logs     chan types.Log
	event    string
	done     bool
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTCollectionApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTCollectionApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTCollectionApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTCollectionApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTCollectionApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTCollectionApprovalForAll represents a ApprovalForAll event raised by the NFTCollection contract.
type NFTCollectionApprovalForAll struct {
	Raw      types.Log
	Owner    common.Address
	Operator common.Address
	Approved bool
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NFTCollection *NFTCollectionFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*NFTCollectionApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NFTCollection.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &NFTCollectionApprovalForAllIterator{contract: _NFTCollection.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NFTCollection *NFTCollectionFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *NFTCollectionApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NFTCollection.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTCollectionApprovalForAll)
				if err := _NFTCollection.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NFTCollection *NFTCollectionFilterer) ParseApprovalForAll(log types.Log) (*NFTCollectionApprovalForAll, error) {
	event := new(NFTCollectionApprovalForAll)
	if err := _NFTCollection.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NFTCollectionTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the NFTCollection contract.
type NFTCollectionTransferIterator struct {
	sub      ethereum.Subscription
	fail     error
	Event    *NFTCollectionTransfer
	contract *bind.BoundContract
	logs     chan types.Log
	event    string
	done     bool
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTCollectionTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTCollectionTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTCollectionTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTCollectionTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTCollectionTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTCollectionTransfer represents a Transfer event raised by the NFTCollection contract.
type NFTCollectionTransfer struct {
	TokenId *big.Int
	Raw     types.Log
	From    common.Address
	To      common.Address
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NFTCollection *NFTCollectionFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*NFTCollectionTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NFTCollection.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NFTCollectionTransferIterator{contract: _NFTCollection.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NFTCollection *NFTCollectionFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *NFTCollectionTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NFTCollection.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTCollectionTransfer)
				if err := _NFTCollection.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NFTCollection *NFTCollectionFilterer) ParseTransfer(log types.Log) (*NFTCollectionTransfer, error) {
	event := new(NFTCollectionTransfer)
	if err := _NFTCollection.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
